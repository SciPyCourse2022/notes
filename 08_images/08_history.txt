mspacek@Godel:~/SciPyCourse2022/notes/08_images$ ipython
Python 3.8.10 (default, Mar 15 2022, 12:22:08)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.1.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: def absdiff(a, b):
   ...:     """Return the abs difference between a and b"""
   ...:     return abs(a - b)

In [2]: def absdiff(a, b):
   ...:     """Return the abs difference between a and b"""
   ...:     a = np.asarray(a)
   ...:     b = np.asarray(b)
   ...:     return abs(a - b)
   ...:

In [3]: pwd
Out[3]: '/home/mspacek/SciPyCourse2022/notes/08_images'

In [4]: cd ..
/home/mspacek/SciPyCourse2022/notes

In [5]: cd homework4
/home/mspacek/SciPyCourse2022/notes/homework4

In [6]: ls
distributions.png  homework4.pdf           student_solutions/
homework4.md       homework4_samples.py    t_absd.npz
homework4.npz      homework4_solutions.py  time_series.png

In [7]: d = np.load('homework4.npz')

In [8]: d
Out[8]: <numpy.lib.npyio.NpzFile at 0x7f3b50b1d730>

In [9]: list(d)
Out[9]: ['t', 'x', 'y']

In [10]: d['t']
Out[10]:
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,
        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,
        4.4,  4.5,  4.6,  4.7,  4.8,  4.9,  5. ,  5.1,  5.2,  5.3,  5.4,
        5.5,  5.6,  5.7,  5.8,  5.9,  6. ,  6.1,  6.2,  6.3,  6.4,  6.5,
        6.6,  6.7,  6.8,  6.9,  7. ,  7.1,  7.2,  7.3,  7.4,  7.5,  7.6,
        7.7,  7.8,  7.9,  8. ,  8.1,  8.2,  8.3,  8.4,  8.5,  8.6,  8.7,
        8.8,  8.9,  9. ,  9.1,  9.2,  9.3,  9.4,  9.5,  9.6,  9.7,  9.8,
        9.9, 10. , 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9,
       11. , 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12. ,
       12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13. , 13.1,
       13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14. , 14.1, 14.2,
       14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15. , 15.1, 15.2, 15.3,
       15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16. , 16.1, 16.2, 16.3, 16.4,
       16.5, 16.6, 16.7, 16.8, 16.9, 17. , 17.1, 17.2, 17.3, 17.4, 17.5,
       17.6, 17.7, 17.8, 17.9, 18. , 18.1, 18.2, 18.3, 18.4, 18.5, 18.6,
       18.7, 18.8, 18.9, 19. , 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7,
       19.8, 19.9, 20. , 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8,
       20.9, 21. , 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9,
       22. , 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23. ,
       23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24. , 24.1,
       24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25. , 25.1, 25.2,
       25.3, 25.4, 25.5, 25.6, 25.7, 25.8, 25.9, 26. , 26.1, 26.2, 26.3,
       26.4, 26.5, 26.6, 26.7, 26.8, 26.9, 27. , 27.1, 27.2, 27.3, 27.4,
       27.5, 27.6, 27.7, 27.8, 27.9, 28. , 28.1, 28.2, 28.3, 28.4, 28.5,
       28.6, 28.7, 28.8, 28.9, 29. , 29.1, 29.2, 29.3, 29.4, 29.5, 29.6,
       29.7, 29.8, 29.9, 30. , 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.7,
       30.8, 30.9, 31. , 31.1, 31.2, 31.3, 31.4, 31.5, 31.6, 31.7, 31.8,
       31.9, 32. , 32.1, 32.2, 32.3, 32.4, 32.5, 32.6, 32.7, 32.8, 32.9,
       33. , 33.1, 33.2, 33.3, 33.4, 33.5, 33.6, 33.7, 33.8, 33.9, 34. ,
       34.1, 34.2, 34.3, 34.4, 34.5, 34.6, 34.7, 34.8, 34.9, 35. , 35.1,
       35.2, 35.3, 35.4, 35.5, 35.6, 35.7, 35.8, 35.9, 36. , 36.1, 36.2,
       36.3, 36.4, 36.5, 36.6, 36.7, 36.8, 36.9, 37. , 37.1, 37.2, 37.3,
       37.4, 37.5, 37.6, 37.7, 37.8, 37.9, 38. , 38.1, 38.2, 38.3, 38.4,
       38.5, 38.6, 38.7, 38.8, 38.9, 39. , 39.1, 39.2, 39.3, 39.4, 39.5,
       39.6, 39.7, 39.8, 39.9, 40. , 40.1, 40.2, 40.3, 40.4, 40.5, 40.6,
       40.7, 40.8, 40.9, 41. , 41.1, 41.2, 41.3, 41.4, 41.5, 41.6, 41.7,
       41.8, 41.9, 42. , 42.1, 42.2, 42.3, 42.4, 42.5, 42.6, 42.7, 42.8,
       42.9, 43. , 43.1, 43.2, 43.3, 43.4, 43.5, 43.6, 43.7, 43.8, 43.9,
       44. , 44.1, 44.2, 44.3, 44.4, 44.5, 44.6, 44.7, 44.8, 44.9, 45. ,
       45.1, 45.2, 45.3, 45.4, 45.5, 45.6, 45.7, 45.8, 45.9, 46. , 46.1,
       46.2, 46.3, 46.4, 46.5, 46.6, 46.7, 46.8, 46.9, 47. , 47.1, 47.2,
       47.3, 47.4, 47.5, 47.6, 47.7, 47.8, 47.9, 48. , 48.1, 48.2, 48.3,
       48.4, 48.5, 48.6, 48.7, 48.8, 48.9, 49. , 49.1, 49.2, 49.3, 49.4,
       49.5, 49.6, 49.7, 49.8, 49.9, 50. , 50.1, 50.2, 50.3, 50.4, 50.5,
       50.6, 50.7, 50.8, 50.9, 51. , 51.1, 51.2, 51.3, 51.4, 51.5, 51.6,
       51.7, 51.8, 51.9, 52. , 52.1, 52.2, 52.3, 52.4, 52.5, 52.6, 52.7,
       52.8, 52.9, 53. , 53.1, 53.2, 53.3, 53.4, 53.5, 53.6, 53.7, 53.8,
       53.9, 54. , 54.1, 54.2, 54.3, 54.4, 54.5, 54.6, 54.7, 54.8, 54.9,
       55. , 55.1, 55.2, 55.3, 55.4, 55.5, 55.6, 55.7, 55.8, 55.9, 56. ,
       56.1, 56.2, 56.3, 56.4, 56.5, 56.6, 56.7, 56.8, 56.9, 57. , 57.1,
       57.2, 57.3, 57.4, 57.5, 57.6, 57.7, 57.8, 57.9, 58. , 58.1, 58.2,
       58.3, 58.4, 58.5, 58.6, 58.7, 58.8, 58.9, 59. , 59.1, 59.2, 59.3,
       59.4, 59.5, 59.6, 59.7, 59.8, 59.9, 60. , 60.1, 60.2, 60.3, 60.4,
       60.5, 60.6, 60.7, 60.8, 60.9, 61. , 61.1, 61.2, 61.3, 61.4, 61.5,
       61.6, 61.7, 61.8, 61.9, 62. , 62.1, 62.2, 62.3, 62.4, 62.5, 62.6,
       62.7, 62.8, 62.9, 63. , 63.1, 63.2, 63.3, 63.4, 63.5, 63.6, 63.7,
       63.8, 63.9, 64. , 64.1, 64.2, 64.3, 64.4, 64.5, 64.6, 64.7, 64.8,
       64.9, 65. , 65.1, 65.2, 65.3, 65.4, 65.5, 65.6, 65.7, 65.8, 65.9,
       66. , 66.1, 66.2, 66.3, 66.4, 66.5, 66.6, 66.7, 66.8, 66.9, 67. ,
       67.1, 67.2, 67.3, 67.4, 67.5, 67.6, 67.7, 67.8, 67.9, 68. , 68.1,
       68.2, 68.3, 68.4, 68.5, 68.6, 68.7, 68.8, 68.9, 69. , 69.1, 69.2,
       69.3, 69.4, 69.5, 69.6, 69.7, 69.8, 69.9, 70. , 70.1, 70.2, 70.3,
       70.4, 70.5, 70.6, 70.7, 70.8, 70.9, 71. , 71.1, 71.2, 71.3, 71.4,
       71.5, 71.6, 71.7, 71.8, 71.9, 72. , 72.1, 72.2, 72.3, 72.4, 72.5,
       72.6, 72.7, 72.8, 72.9, 73. , 73.1, 73.2, 73.3, 73.4, 73.5, 73.6,
       73.7, 73.8, 73.9, 74. , 74.1, 74.2, 74.3, 74.4, 74.5, 74.6, 74.7,
       74.8, 74.9, 75. , 75.1, 75.2, 75.3, 75.4, 75.5, 75.6, 75.7, 75.8,
       75.9, 76. , 76.1, 76.2, 76.3, 76.4, 76.5, 76.6, 76.7, 76.8, 76.9,
       77. , 77.1, 77.2, 77.3, 77.4, 77.5, 77.6, 77.7, 77.8, 77.9, 78. ,
       78.1, 78.2, 78.3, 78.4, 78.5, 78.6, 78.7, 78.8, 78.9, 79. , 79.1,
       79.2, 79.3, 79.4, 79.5, 79.6, 79.7, 79.8, 79.9, 80. , 80.1, 80.2,
       80.3, 80.4, 80.5, 80.6, 80.7, 80.8, 80.9, 81. , 81.1, 81.2, 81.3,
       81.4, 81.5, 81.6, 81.7, 81.8, 81.9, 82. , 82.1, 82.2, 82.3, 82.4,
       82.5, 82.6, 82.7, 82.8, 82.9, 83. , 83.1, 83.2, 83.3, 83.4, 83.5,
       83.6, 83.7, 83.8, 83.9, 84. , 84.1, 84.2, 84.3, 84.4, 84.5, 84.6,
       84.7, 84.8, 84.9, 85. , 85.1, 85.2, 85.3, 85.4, 85.5, 85.6, 85.7,
       85.8, 85.9, 86. , 86.1, 86.2, 86.3, 86.4, 86.5, 86.6, 86.7, 86.8,
       86.9, 87. , 87.1, 87.2, 87.3, 87.4, 87.5, 87.6, 87.7, 87.8, 87.9,
       88. , 88.1, 88.2, 88.3, 88.4, 88.5, 88.6, 88.7, 88.8, 88.9, 89. ,
       89.1, 89.2, 89.3, 89.4, 89.5, 89.6, 89.7, 89.8, 89.9, 90. , 90.1,
       90.2, 90.3, 90.4, 90.5, 90.6, 90.7, 90.8, 90.9, 91. , 91.1, 91.2,
       91.3, 91.4, 91.5, 91.6, 91.7, 91.8, 91.9, 92. , 92.1, 92.2, 92.3,
       92.4, 92.5, 92.6, 92.7, 92.8, 92.9, 93. , 93.1, 93.2, 93.3, 93.4,
       93.5, 93.6, 93.7, 93.8, 93.9, 94. , 94.1, 94.2, 94.3, 94.4, 94.5,
       94.6, 94.7, 94.8, 94.9, 95. , 95.1, 95.2, 95.3, 95.4, 95.5, 95.6,
       95.7, 95.8, 95.9, 96. , 96.1, 96.2, 96.3, 96.4, 96.5, 96.6, 96.7,
       96.8, 96.9, 97. , 97.1, 97.2, 97.3, 97.4, 97.5, 97.6, 97.7, 97.8,
       97.9, 98. , 98.1, 98.2, 98.3, 98.4, 98.5, 98.6, 98.7, 98.8, 98.9,
       99. , 99.1, 99.2, 99.3, 99.4, 99.5, 99.6, 99.7, 99.8, 99.9])

In [11]: d['x']
Out[11]:
array([3.94362515, 5.84270326, 4.39117254, 6.36281471, 4.43228374,
       5.19457018, 5.72034936, 4.48991012, 5.10128753, 5.20099049,
       4.49841193, 5.15507246, 4.97334956, 5.26699879, 4.96555672,
       3.98252022, 4.69769095, 4.37998003, 5.13845914, 4.53654422,
       4.84336492, 5.16246475, 4.50880392, 5.44545474, 4.95058598,
       4.82060759, 5.70213801, 5.28980271, 3.98647678, 5.18971978,
       5.61143873, 5.46621862, 5.64418488, 5.12864545, 5.03199724,
       5.94397537, 6.40592249, 3.99240585, 4.69402129, 5.36111546,
       3.98068776, 4.89870199, 6.09930295, 5.71565584, 4.64882499,
       5.15286902, 4.71283166, 4.83795223, 5.33250879, 4.70438035,
       5.01797295, 5.19152469, 4.57310913, 5.11466552, 4.71154115,
       5.45720107, 6.08173871, 5.30042187, 5.22156077, 5.03066689,
       5.24498377, 4.82584673, 4.45493402, 4.67832714, 5.30073525,
       5.56287596, 4.78488495, 4.88632057, 5.13968134, 4.18200933,
       4.64942982, 4.46964969, 4.50363255, 5.25241004, 4.88727249,
       5.43617882, 4.68962941, 4.55205796, 4.49949837, 4.78762876,
       4.28334801, 5.08803021, 6.60432568, 4.95076621, 5.31678524,
       5.40856389, 4.56404146, 4.79481296, 4.17684079, 5.1754849 ,
       5.1676418 , 5.14756073, 4.99876595, 4.57579204, 5.25198508,
       4.57664479, 5.35911258, 6.22048184, 5.52917855, 4.58737483,
       6.0142675 , 5.01333075, 5.11586013, 4.76126642, 4.87932225,
       5.40332485, 3.70118223, 4.70298855, 4.29297674, 5.19592348,
       5.08917862, 5.08408223, 5.01371058, 4.48044009, 5.44141677,
       4.61220338, 5.09745016, 4.92064047, 5.51251385, 5.09450629,
       5.09764733, 5.12431364, 4.78900687, 5.62027024, 4.02159551,
       4.88172135, 5.21797417, 4.32224082, 5.51523339, 5.17134941,
       4.98802411, 5.47550015, 4.97158703, 4.61889115, 4.69495149,
       5.88416412, 5.01922996, 4.73354903, 4.82656679, 4.59158268,
       5.41062856, 4.45940292, 5.13643227, 5.32547237, 4.4823475 ,
       5.2193246 , 5.36185282, 4.54567937, 5.80863714, 5.42667535,
       5.74639846, 5.43211416, 4.39681192, 3.83120576, 5.3399107 ,
       5.21551691, 4.93402994, 4.20531599, 5.28036269, 4.80315226,
       4.45514166, 5.61902614, 4.44331044, 5.31005977, 5.18022879,
       4.18698026, 4.60592684, 5.12291594, 5.08437401, 5.55255601,
       5.17782104, 5.18026777, 4.69844275, 4.72957241, 5.3828204 ,
       5.4175657 , 4.36353939, 4.18508118, 4.37314714, 5.18076789,
       5.49828201, 6.0016327 , 5.08421157, 4.91380324, 5.49356864,
       4.94349285, 5.47759848, 4.33465881, 4.41171635, 5.42218464,
       5.06655191, 4.65929396, 5.21117058, 5.2019459 , 5.12905705,
       5.26721247, 5.37255761, 5.89890677, 5.3060179 , 4.74197265,
       5.76399253, 4.9672227 , 5.2929389 , 5.33714109, 5.33844602,
       4.46117205, 5.42141766, 4.59012013, 6.09229624, 5.64967531,
       4.92252491, 4.94759729, 4.48691948, 4.78324976, 3.98814798,
       5.18496857, 5.31003189, 5.26999639, 4.78161809, 5.0641812 ,
       4.57358783, 5.42601538, 4.35476094, 6.38389529, 4.93023542,
       4.39032824, 5.33181397, 4.96904223, 5.26538937, 4.60628859,
       5.39535406, 5.90306639, 4.74626529, 4.78374643, 5.236542  ,
       5.35463095, 5.66814374, 5.20639639, 6.11090388, 4.5911035 ,
       5.38356021, 5.0605228 , 4.99665157, 5.099586  , 4.25974301,
       4.43946377, 5.67671567, 4.80703441, 4.78779606, 5.37459431,
       5.73684212, 5.21668144, 5.12035102, 4.82406126, 5.36783777,
       5.17994878, 4.4401385 , 4.85179917, 4.97080291, 4.78309373,
       4.54008709, 5.03265066, 4.56144977, 5.97196097, 4.80160242,
       4.55790268, 4.84667674, 5.59966363, 4.53858314, 5.06951168,
       4.86858987, 4.42473159, 5.10716012, 4.73031685, 5.67786395,
       5.29321056, 5.87557418, 4.45820073, 5.090329  , 5.25989171,
       4.45268061, 5.08471337, 5.02813016, 5.84312431, 4.98332373,
       5.16519361, 5.11346491, 5.23506368, 4.69716038, 4.69416608,
       4.51259405, 4.81302547, 4.39583958, 4.94413316, 4.83013787,
       5.03655979, 6.06103536, 5.25576594, 5.26191524, 4.73906414,
       4.65202123, 5.25427782, 6.07771474, 5.16834787, 4.15868057,
       5.19212989, 4.8412646 , 5.19783474, 5.53482994, 3.93410184,
       5.08196015, 4.25976847, 4.0184751 , 4.26267962, 5.11400812,
       4.92542568, 4.8575669 , 4.801142  , 4.21721347, 5.63768892,
       5.2245216 , 5.22254775, 5.16096984, 4.9270214 , 4.81731344,
       4.25434093, 5.36219732, 5.19459525, 5.91531242, 4.93163815,
       4.74231086, 4.56186243, 5.06275426, 4.89911285, 4.99624158,
       4.96228505, 5.21754138, 4.42726653, 4.67462999, 6.06266993,
       5.60560314, 4.9230828 , 5.74805296, 4.62541185, 5.37472389,
       5.83562145, 4.36298968, 5.35202859, 4.51538136, 5.33632228,
       4.55546476, 3.81523436, 4.79838206, 4.37869435, 5.75924754,
       5.23706028, 5.53497625, 4.65019703, 4.44782032, 5.10365246,
       4.74397836, 4.4699703 , 6.78431008, 4.51265365, 4.31235813,
       5.40154652, 5.82411583, 5.28512316, 5.05774686, 4.98621602,
       5.24048975, 4.96121261, 4.50418624, 5.23735486, 5.28466709,
       4.88689666, 5.66904368, 4.94910352, 5.408734  , 5.66362146,
       4.97857506, 5.17899277, 5.35733453, 4.99507591, 5.17387281,
       5.24852132, 4.06311898, 4.62830661, 3.95387299, 5.95423291,
       5.77548093, 5.08547608, 4.73613712, 4.85720639, 4.81744332,
       5.11380579, 4.50055092, 6.01231144, 5.54697581, 5.10792768,
       4.78134039, 5.99501558, 5.09394206, 4.77998604, 4.16427094,
       5.15947353, 5.0662201 , 4.34509179, 5.67573429, 5.16266905,
       4.26379377, 5.47277004, 5.32436267, 5.30950086, 5.59809234,
       5.62302684, 4.03981251, 4.27881312, 5.01522192, 4.2875247 ,
       4.1651158 , 5.00012702, 5.48834387, 5.36140462, 4.59143336,
       5.58008719, 4.88330715, 5.0627665 , 5.38512791, 4.82681215,
       4.12700795, 4.10366361, 5.44239236, 3.63002705, 5.75803198,
       4.19083132, 5.3848751 , 5.19496974, 3.83679582, 6.01302813,
       6.18872624, 5.60304424, 5.51053888, 5.37929421, 5.46810483,
       5.27316045, 5.22101134, 5.55493215, 4.96951381, 4.10556265,
       4.95039939, 4.89764044, 5.83113509, 4.93552723, 5.43451587,
       5.71614449, 4.88054165, 5.74342045, 4.96260234, 5.57516125,
       4.58066629, 4.99234758, 4.66875194, 5.690924  , 5.46250105,
       4.94972605, 5.68767006, 4.0110491 , 5.0802095 , 4.55299581,
       4.94324368, 5.26171036, 4.30677446, 6.25015748, 5.78968722,
       5.02305961, 5.02050261, 5.3655072 , 5.42107064, 4.54602073,
       4.83718447, 4.90134745, 4.97678272, 5.13071786, 5.02447241,
       4.61292523, 4.49932124, 5.33886197, 4.74141796, 4.80620149,
       5.00864244, 5.52795411, 4.40809666, 5.51791752, 3.85989117,
       4.8589279 , 5.22800222, 4.1016432 , 4.81368358, 4.65651759,
       4.7604872 , 4.78071869, 6.34073849, 3.7524372 , 4.09064303,
       4.51124039, 4.13626989, 5.11689642, 6.02068715, 5.49998432,
       4.63434824, 5.13238209, 5.14994977, 4.68215563, 4.64213491,
       5.8538603 , 4.57573302, 4.71446537, 5.70849337, 4.97776708,
       4.84610823, 3.99224636, 5.59016701, 5.18678854, 6.21336856,
       5.22585461, 5.34230541, 4.52269823, 4.92485913, 4.57412073,
       5.07335507, 4.79097669, 5.57867974, 4.75978273, 5.63912413,
       4.66627157, 4.31086396, 5.581597  , 4.72828269, 5.06667122,
       4.96443297, 5.26512979, 4.53435223, 4.30122529, 5.0873754 ,
       4.95471186, 5.56162539, 4.82439673, 5.00386121, 3.973295  ,
       5.20121632, 5.50438905, 5.09129658, 4.53136194, 4.76068645,
       5.17127831, 4.91152468, 4.19989582, 5.5326502 , 5.23520901,
       4.66470328, 4.83546059, 3.97205024, 5.03899444, 5.80668704,
       4.64162606, 4.7821459 , 4.62456115, 4.06033933, 5.28458196,
       5.81498651, 4.47620989, 5.83752227, 5.16245499, 5.35181048,
       4.86546537, 5.506145  , 4.97372324, 4.398827  , 4.10463414,
       4.97290095, 5.10535413, 4.75723612, 5.33904061, 5.22772529,
       4.45404169, 4.99819478, 4.70181734, 5.17210417, 4.54090079,
       4.8210946 , 5.22834129, 4.79789231, 4.60090967, 5.85772776,
       5.04203781, 5.1349851 , 5.16873439, 5.52224413, 5.17270398,
       3.99548854, 5.19599272, 5.338351  , 4.84091101, 4.95083565,
       4.40964076, 4.25143098, 5.4804796 , 4.88183124, 4.78120287,
       4.33054297, 4.87375477, 5.14709502, 4.34864803, 5.76808272,
       5.24889069, 4.73660891, 5.74559119, 5.42997593, 5.04841296,
       6.22628012, 4.13699928, 5.6068744 , 4.60684989, 4.88788189,
       5.68252945, 5.31630472, 5.33038333, 4.84283935, 4.44603416,
       4.85592771, 5.90001934, 4.3390404 , 5.29138064, 4.69324575,
       4.42534914, 5.95606462, 4.7713408 , 4.78370064, 5.64424506,
       5.36304169, 4.46478704, 4.56199341, 5.05062785, 4.82057642,
       5.19164465, 5.39251826, 5.14742075, 5.88958942, 5.46192376,
       4.55810785, 5.24155093, 5.94098348, 4.64689101, 4.90941553,
       4.91369797, 5.09755826, 4.83274193, 5.53480046, 4.50102863,
       5.04511026, 4.27096346, 4.6887259 , 4.98485888, 5.08537298,
       4.89160406, 5.5805236 , 5.52250611, 4.55838049, 5.7883481 ,
       5.51756987, 5.21540518, 5.68442634, 4.89646841, 5.71336146,
       4.84029886, 5.16726375, 5.0316261 , 5.8031815 , 5.64674355,
       5.45057577, 4.96479865, 5.0665772 , 4.99829929, 5.60376252,
       5.26574986, 5.27205221, 5.0069914 , 4.87661817, 5.54219499,
       4.43255153, 5.32819959, 5.06429457, 5.35527764, 5.29050597,
       4.92116327, 5.30787907, 6.10788248, 5.11541771, 5.19100021,
       4.63972112, 4.73808802, 5.28977224, 5.21018512, 4.76925812,
       5.01461238, 5.10813825, 4.29264705, 5.50694348, 3.89502523,
       5.07921256, 5.1845846 , 5.57937645, 5.06845135, 4.98286986,
       4.83954042, 4.79523924, 4.29158098, 4.63732717, 5.23377747,
       5.01762978, 4.93993978, 5.44747211, 5.99425111, 4.17561767,
       5.58463949, 4.73773497, 5.04106624, 4.3233228 , 5.33477164,
       5.28482969, 4.43671149, 5.09149377, 4.74785714, 3.56746994,
       5.27452956, 5.39886671, 4.57076929, 4.94015759, 4.25617561,
       5.62499957, 4.27048685, 4.86320396, 5.53491169, 4.40911076,
       4.7959821 , 5.17455733, 4.81276844, 4.3835465 , 4.81275085,
       5.67655191, 5.38820707, 5.53827833, 4.9506082 , 5.01254902,
       5.28351921, 4.65567695, 5.3993048 , 5.58246532, 6.41784546,
       5.1802625 , 5.00241193, 4.89461017, 4.79517793, 5.64215621,
       5.22548989, 4.26374868, 5.35035952, 4.61169576, 5.2205033 ,
       4.74488352, 5.4273602 , 5.48704968, 5.02730464, 4.56640329,
       5.61231581, 4.91248441, 4.57996479, 5.98700229, 4.90131563,
       5.67193599, 5.96782917, 5.18143398, 5.68538516, 4.68292989,
       6.0881636 , 4.93517229, 4.44833957, 4.63611423, 5.21372572,
       4.10178262, 4.99091043, 4.92669371, 5.32321666, 4.58518005,
       4.92495015, 5.32475977, 4.97695667, 4.25245211, 5.5155031 ,
       4.7209057 , 5.0631944 , 5.61618246, 5.57138538, 5.58267108,
       4.82786341, 4.22059685, 4.66379276, 5.53660406, 4.44399767,
       4.63749024, 5.27933388, 6.02775279, 5.23506533, 5.16154097,
       5.23831996, 4.75520757, 4.13500054, 6.06947761, 5.07885766,
       4.49684407, 5.30934277, 5.06736093, 4.52069484, 6.21671777,
       5.0331226 , 5.32091712, 4.55768861, 4.09549472, 4.18489068,
       4.9229003 , 5.06552487, 4.586464  , 4.78097107, 4.42272792,
       4.37610186, 4.84072967, 4.69477141, 4.69125814, 4.19340918,
       4.66411492, 4.95771322, 4.70802287, 4.74197822, 4.99146413,
       4.99637502, 4.78708724, 4.74892874, 5.49762922, 5.54949687,
       4.77145774, 5.70870421, 5.271475  , 5.22474362, 5.03121609,
       4.96591635, 4.12196524, 5.28129791, 4.75374805, 4.19807342,
       4.52809791, 5.59072372, 5.68652718, 4.55219623, 4.81791432,
       5.66878384, 5.73289496, 4.70417519, 4.93695075, 4.88962685,
       4.67318965, 5.25535516, 4.63748524, 5.50812399, 5.30402403,
       5.71423394, 4.87466121, 4.75911084, 4.82466163, 5.11656808,
       4.78780568, 5.10425699, 4.79469661, 4.99657925, 4.11830018,
       4.34396731, 4.96147284, 4.94483929, 5.40147814, 5.31721902,
       4.76017557, 5.11257858, 4.3149258 , 4.64610932, 4.14142094,
       4.01638332, 4.52541764, 4.29136539, 5.12153432, 4.69057771,
       4.25895958, 5.80867925, 4.87863919, 4.4675869 , 5.01438089,
       4.19774728, 5.73747024, 5.342518  , 5.37586834, 4.65416032,
       5.17756608, 4.24042941, 5.34575416, 4.87365353, 4.4029035 ,
       5.70269014, 5.38329032, 4.9921666 , 5.09451472, 5.33084898,
       6.00655912, 5.2302687 , 5.11415558, 4.98474317, 5.87895691,
       5.77270398, 4.62129877, 4.22430755, 4.75541828, 5.15818916,
       5.01251663, 5.80170626, 5.10106346, 5.75647048, 4.93756154,
       5.41909101, 5.31450897, 4.55434894, 4.67278419, 3.84433985,
       4.8353421 , 6.08614751, 5.1637876 , 5.24431937, 4.59969845,
       3.76655681, 4.70774083, 5.70314476, 6.02084871, 5.40529957,
       4.65220932, 4.70319144, 3.85352732, 6.0860378 , 5.20469938,
       5.23844578, 5.71478686, 4.77695858, 5.18565028, 5.48596598,
       5.86019749, 4.63482437, 5.32217265, 5.71425648, 4.99788538,
       4.66188428, 4.83964427, 5.184458  , 5.67025949, 5.01604086,
       5.34165328, 4.84499766, 4.81175556, 4.27041652, 4.91956795,
       5.25383902, 4.37771892, 4.46257654, 5.18344231, 5.06122352,
       5.42854794, 4.40423119, 4.3339435 , 5.29247646, 4.33504359,
       5.32115795, 5.76856021, 5.86929767, 4.94765288, 4.08317601,
       5.40244088, 4.20772796, 4.83320461, 4.9367992 , 5.19457174,
       5.45562918, 5.3891692 , 5.03290804, 6.27288839, 4.94909501])

In [12]: d['y']
Out[12]:
array([2.97463895, 3.16328139, 3.06897269, 3.569142  , 2.90253517,
       2.94783463, 3.23048849, 3.11396979, 2.9538954 , 2.84995787,
       2.52635376, 3.02811655, 2.74124298, 3.1472435 , 3.00618091,
       3.03563486, 3.21666478, 2.88505754, 3.09229205, 2.97459015,
       2.82318258, 3.34196367, 2.97134095, 2.97325066, 2.62259226,
       3.30096821, 2.77533325, 3.05211358, 2.80248565, 2.77264216,
       2.67739569, 3.35450934, 3.32898292, 2.96500413, 2.51673335,
       3.19504084, 2.92668089, 3.41376252, 2.78277613, 3.165507  ,
       2.91113235, 2.56387755, 2.75246463, 2.79777981, 3.16697759,
       3.17768186, 3.01298036, 3.16478643, 3.04165045, 2.66220589,
       3.28452478, 3.04116477, 3.10002505, 3.37827518, 3.18819865,
       3.22706597, 3.02450525, 3.02072445, 2.89978443, 2.96429433,
       3.06017072, 2.75257943, 2.96504634, 3.14525339, 3.23386261,
       2.41641517, 2.82597278, 3.08480586, 3.03779433, 2.91380072,
       3.11806525, 3.30465826, 3.06207867, 3.39215228, 2.89270012,
       2.95923302, 2.89372305, 2.4928091 , 3.00626545, 3.66714986,
       3.01272312, 2.95488135, 3.10020632, 2.99191685, 3.00440869,
       2.94638859, 3.01250401, 3.14026308, 2.50130385, 2.68800642,
       2.69445214, 3.21936418, 3.1163849 , 3.35934884, 3.0519206 ,
       3.12924437, 3.54037583, 3.39008654, 3.38687908, 2.90723723,
       3.08398215, 3.30527264, 3.08465851, 3.18396817, 2.97814047,
       3.00256871, 2.6076818 , 2.59915329, 3.37669723, 3.12855357,
       2.93556261, 2.55563304, 2.76871739, 2.93547504, 3.068072  ,
       3.08509639, 3.22098278, 3.15125031, 3.08643304, 2.95785558,
       2.92229625, 2.87070167, 3.18281251, 2.86064676, 2.81649495,
       2.73133261, 3.16755102, 2.75593486, 2.90624337, 2.81975694,
       2.75408983, 2.74824808, 2.66598457, 2.99170794, 3.11107816,
       3.25649899, 2.65982324, 2.89120867, 2.99764247, 3.00332404,
       3.021997  , 3.4599064 , 2.7821346 , 2.74089607, 3.15857423,
       3.3560093 , 3.32659738, 2.9977623 , 2.58980507, 2.8534064 ,
       3.21876097, 2.96153928, 2.92042387, 3.03222068, 3.12306003,
       2.96271976, 2.96432718, 2.83051305, 3.16168664, 3.10807604,
       3.11259538, 2.97322547, 3.04449003, 2.92335157, 2.9258331 ,
       2.80028611, 2.98928343, 2.89574123, 3.22245459, 3.4241544 ,
       2.85003212, 2.55246059, 2.68466779, 3.36314392, 2.23316   ,
       2.91913582, 2.8905192 , 3.11648372, 3.2434438 , 3.09542046,
       2.81272123, 2.6297644 , 2.75082508, 2.85029269, 2.51083719,
       3.20803552, 2.7425953 , 2.89064495, 2.77402822, 2.7146714 ,
       2.75087   , 2.86354384, 2.90220741, 3.18403228, 2.62276341,
       3.19831899, 3.40511691, 2.6519319 , 3.04948722, 2.74202748,
       3.35124545, 2.72076938, 2.98455355, 3.09880705, 2.94854237,
       2.82436403, 2.74967294, 2.64309812, 2.86284671, 2.80549412,
       2.46095019, 2.86265985, 2.72929995, 2.85709942, 2.92743272,
       3.21410484, 2.98204299, 2.53198975, 2.89936987, 2.70698369,
       3.3088734 , 2.55633195, 3.17694139, 3.27136814, 3.31311304,
       3.25421467, 2.96493388, 2.62991244, 3.11741802, 2.8596006 ,
       3.30730946, 2.76964334, 3.07830302, 2.72665749, 3.05338081,
       3.2554517 , 2.98101741, 3.25096641, 3.06958374, 2.64758465,
       3.40956582, 2.94590446, 2.84273531, 2.91659974, 2.85715755,
       2.90409979, 3.46421824, 3.23795763, 2.78439708, 3.29340251,
       3.41367071, 3.24366278, 2.6763042 , 2.64701281, 3.2218103 ,
       3.08906866, 2.71975826, 3.43672594, 3.25656004, 3.0447019 ,
       3.14037629, 3.21722667, 2.96683946, 3.19266429, 3.23844245,
       2.98808461, 2.6739543 , 3.73152815, 3.63291743, 2.69601175,
       3.07235688, 2.85378233, 3.19813354, 3.13844378, 2.8318121 ,
       3.12504274, 3.1931631 , 3.17794485, 2.73398618, 3.13361258,
       2.96456131, 3.42947856, 3.63873149, 2.84829169, 2.66533393,
       2.90513703, 3.49189276, 3.04969579, 3.14114686, 2.93763252,
       3.06817368, 3.22061986, 3.22570129, 2.96503309, 3.01412294,
       3.14125255, 3.01642208, 3.05945586, 2.94214856, 2.88914799,
       2.38113234, 2.8961694 , 2.68659001, 2.84267938, 2.77595526,
       2.94969402, 2.76222634, 2.88143274, 2.83599705, 3.21077958,
       2.90385333, 3.22114489, 3.25016891, 3.20683804, 2.95822484,
       3.05385029, 3.04997351, 2.74321561, 3.06518787, 2.9842132 ,
       2.74532354, 3.52928687, 2.64593742, 2.7161072 , 3.22581759,
       3.0515084 , 3.070855  , 3.50431725, 3.38242469, 3.37912869,
       2.90166393, 3.20601199, 2.78876889, 2.69179213, 2.8918518 ,
       2.83913759, 2.9226792 , 2.83125068, 2.72755972, 2.94743691,
       3.38191191, 2.96644657, 3.39501631, 2.77107236, 3.40820174,
       3.06753013, 3.14875878, 2.65301742, 3.05823384, 3.18248841,
       3.13789704, 2.43663148, 2.74498539, 3.11920699, 3.07599545,
       3.04489223, 2.83774206, 3.3725755 , 3.27013874, 2.59953853,
       3.12708338, 3.38616578, 2.6853391 , 3.00118706, 2.85836705,
       2.27137895, 3.46515951, 2.91781876, 2.80166696, 2.91931552,
       2.89369897, 3.37451991, 2.95952725, 2.72913111, 3.15436315,
       2.57788155, 2.71730549, 2.72761958, 2.70547843, 3.37113771,
       3.05145725, 3.22954845, 2.87499229, 2.88584796, 2.8314238 ,
       2.85778609, 3.13441815, 3.53289354, 3.22587856, 2.59103955,
       2.7080576 , 3.04402465, 3.66092005, 3.23885462, 2.79041682,
       3.1517194 , 2.89971554, 2.83080581, 3.0527091 , 2.40357665,
       2.83358545, 2.58272758, 2.83831001, 2.70208715, 3.06351853,
       3.32163958, 2.84696979, 3.10602451, 2.94090396, 2.92891614,
       2.95056864, 2.99843327, 3.22355881, 2.83487834, 2.733122  ,
       2.89676118, 2.812167  , 3.2739427 , 3.32950421, 3.39085323,
       3.07436733, 2.79301521, 2.99230632, 2.78285212, 2.78520598,
       3.01668062, 2.85786696, 2.76508272, 2.5376603 , 3.31414146,
       2.84569284, 3.01666341, 3.61715198, 3.15123691, 2.90589157,
       2.84364693, 2.80254264, 2.86202007, 2.56154752, 2.9949491 ,
       2.94124894, 3.12530756, 2.38361017, 2.89979063, 3.33322714,
       2.97832607, 2.7626117 , 3.27671013, 3.0713013 , 2.49744958,
       2.90358981, 2.6789977 , 2.49704213, 3.03471487, 2.98883874,
       2.94306139, 3.11380105, 2.88259257, 2.81001173, 3.11184672,
       3.43889607, 2.79054467, 3.23675874, 3.11297286, 3.21244125,
       3.47548518, 3.25926699, 2.75492937, 3.06070526, 2.78272207,
       3.17096881, 2.87272577, 3.27122061, 2.85079963, 3.15693283,
       3.10259975, 2.97155211, 3.50296532, 3.01184747, 2.55331451,
       3.36938773, 3.00486776, 3.60040852, 3.17518878, 3.29547148,
       2.69829701, 3.02452993, 3.23977149, 2.70871432, 3.25965355,
       3.01363519, 3.18681054, 3.16662393, 3.08352843, 2.67491894,
       3.10538201, 3.29231406, 2.81554629, 3.04076283, 3.10882601,
       2.8925528 , 2.80939968, 3.01420148, 2.96410342, 3.11499892,
       2.83203844, 3.04244595, 2.69183383, 2.73081185, 2.80124189,
       3.26944694, 3.09982518, 2.96751561, 3.23145285, 3.40719553,
       2.50143953, 2.86703179, 3.14495026, 2.83248766, 2.63148609,
       2.61753276, 3.11742702, 3.12584123, 2.53510153, 2.67607453,
       3.39398863, 2.83222913, 2.98004982, 3.28847279, 2.97251165,
       2.72874676, 3.04002945, 3.0461813 , 3.21554322, 3.15029376,
       3.2638308 , 3.20105903, 2.67894515, 3.09408345, 3.02414741,
       3.13530447, 2.98581329, 3.26438383, 2.88366008, 3.83439474,
       3.36605073, 3.21074526, 2.8256318 , 3.26894295, 2.85575077,
       2.70485254, 3.27719209, 3.03352832, 3.3568232 , 3.1258126 ,
       2.88848149, 2.78817145, 3.03215214, 3.10731906, 3.54205737,
       2.84916815, 3.05435897, 3.34521563, 2.98055463, 3.15157973,
       2.9440232 , 2.71502256, 3.33602871, 2.34789901, 2.67876174,
       3.28476225, 2.9002967 , 2.91680991, 2.68597844, 3.21285796,
       2.85709918, 2.99903103, 3.21842825, 3.2141382 , 3.01977013,
       3.11720697, 3.12817586, 2.69503812, 2.71482527, 2.84658961,
       3.30990382, 2.67401489, 2.31462262, 3.31172128, 3.08757133,
       2.82934853, 2.92814736, 3.2218311 , 3.4703933 , 2.77762584,
       3.39107502, 2.75812716, 2.57051412, 2.97802615, 2.58139375,
       2.79095728, 3.08693219, 2.94924256, 3.27099655, 3.23861914,
       3.21343337, 3.02257719, 2.93165753, 3.17249684, 3.50909145,
       2.77910855, 3.32446927, 2.76062899, 3.06607021, 3.08957409,
       3.25374553, 3.10564569, 3.01828167, 3.42178077, 3.23159573,
       2.99966322, 2.80215657, 2.88893643, 3.26795692, 2.45131096,
       2.96601183, 3.04474033, 2.74184875, 3.05320447, 3.23537959,
       2.70375127, 3.19396894, 3.19149644, 3.18711809, 3.07079899,
       3.28535993, 3.30171733, 3.50422202, 2.76593925, 2.857604  ,
       2.59627637, 2.65570861, 2.61071359, 2.99194654, 3.17412972,
       3.07316052, 3.01441565, 3.42318017, 3.58839609, 3.16096651,
       2.81385583, 2.92998466, 3.1044718 , 2.7970122 , 3.16057803,
       2.94410783, 3.08681135, 2.66741122, 2.92350058, 2.78775591,
       2.85739263, 3.148506  , 2.77610874, 2.36236352, 2.9745117 ,
       3.00034836, 3.06374717, 3.22416359, 2.99552638, 3.29480582,
       2.709285  , 2.51686452, 3.22938491, 2.81819201, 3.03887517,
       3.13422992, 2.85002953, 3.33632577, 2.89991745, 3.1150582 ,
       3.10321073, 3.01575359, 3.26436819, 3.31290387, 3.08389452,
       3.08121194, 2.98830708, 2.85783689, 3.3717972 , 2.82833443,
       3.10454403, 3.05631959, 3.05967011, 2.99390612, 3.01193726,
       2.9668189 , 2.94852007, 2.93681164, 3.13008549, 2.72762713,
       3.09684181, 2.85157515, 3.10199893, 3.34430852, 3.13299993,
       2.93193192, 3.30281083, 3.39030577, 2.90200634, 2.87596713,
       2.93631848, 2.88645754, 2.74302459, 2.78075999, 3.29378013,
       3.00150333, 3.14779875, 2.9089023 , 3.10945503, 3.09455722,
       2.717203  , 3.28703678, 3.17338304, 3.05159536, 2.74645187,
       3.00225835, 3.19483975, 2.59316298, 2.81345525, 2.3940734 ,
       2.88363325, 2.16872108, 3.28696135, 3.03952786, 3.16723229,
       3.27648352, 2.71712824, 2.94673324, 3.30702914, 2.79110062,
       2.73253866, 3.05425943, 2.91437525, 2.96944159, 2.88383578,
       3.25679227, 2.520673  , 2.98684965, 3.52515142, 3.23606327,
       2.89788678, 3.14922971, 3.3135897 , 2.94409305, 2.63302226,
       3.00137584, 3.1038504 , 3.43675569, 3.24987021, 2.69756249,
       3.36222834, 3.10442203, 3.16471978, 3.26582044, 3.10048312,
       3.08015866, 3.06974254, 3.62337575, 3.33426805, 2.46754017,
       3.045747  , 3.12202946, 3.06952193, 2.69825727, 2.91181749,
       3.11654859, 3.45859088, 3.055339  , 3.08296058, 3.25484291,
       2.77186327, 3.54755934, 3.39427035, 3.25357183, 3.01067753,
       3.03067121, 3.1667178 , 3.12818846, 2.21036283, 2.67109504,
       2.85213799, 2.8554368 , 2.86373043, 3.20084497, 3.37966024,
       3.21450907, 2.94142255, 2.89929518, 3.12766209, 3.05580836,
       3.08277153, 3.09866204, 2.41075748, 2.93095655, 3.0422572 ,
       2.96733239, 3.12389481, 2.95181592, 2.65976987, 2.85476948,
       3.03437221, 3.23787195, 2.77292727, 2.66604846, 3.08117573,
       3.38549454, 2.79634841, 3.5010018 , 2.76487399, 3.58441114,
       2.98658614, 3.00389602, 2.6941158 , 2.83286653, 2.39369012,
       3.12060913, 3.39634738, 2.66265467, 2.6719343 , 3.41001716,
       2.68892867, 2.81609858, 2.81653151, 2.96938717, 3.09441086,
       2.85031866, 2.96344336, 2.89381541, 3.07394737, 2.82977904,
       3.05430164, 3.04465625, 2.8573066 , 2.75436161, 2.6250042 ,
       2.60524796, 2.62038247, 3.01593328, 2.718343  , 3.18557624,
       2.80966555, 2.73385598, 2.57231984, 2.88190873, 3.21857325,
       2.50047387, 2.84091346, 2.77226956, 2.78325125, 2.47945664,
       2.74389612, 2.60415467, 2.45750239, 3.06586865, 3.03774996,
       2.79196011, 3.24516478, 2.95243248, 2.66828924, 3.12443701,
       3.32144857, 2.79585287, 2.90878774, 2.16102652, 2.50410165,
       2.89064938, 2.69275647, 3.29010084, 2.98439699, 3.28696239,
       3.20504491, 3.28650539, 2.88828578, 2.40960545, 2.95114531,
       2.57062948, 2.87988421, 3.08207536, 2.88236176, 2.81997908,
       2.79268595, 2.94962502, 2.45431907, 3.05956819, 2.75293134,
       3.12985444, 3.45846135, 2.63480718, 3.0003143 , 3.19545261,
       2.6078326 , 3.32808353, 2.88769158, 2.94527037, 3.06884055,
       2.72303547, 3.26373505, 2.86553493, 3.02431363, 3.26883649,
       2.60901501, 3.17523886, 3.55790014, 2.81430908, 3.17056118,
       3.10539784, 3.21617758, 2.94280434, 2.92201248, 3.05857396,
       2.76921039, 3.07071327, 3.22960697, 3.29947905, 3.10787276,
       2.91519744, 3.11561696, 3.08056127, 3.24774268, 2.64089144,
       2.95925347, 2.85124409, 3.1207341 , 3.51627016, 3.06245824,
       3.08066758, 3.07954311, 2.61994733, 3.16764199, 3.02016765,
       3.28217152, 3.14544754, 2.73652197, 3.05586369, 3.0675403 ,
       3.01875769, 2.89478897, 3.3775542 , 2.68307153, 3.07170606,
       3.11575673, 2.85742874, 2.8842995 , 2.90233429, 3.29042847,
       3.2307794 , 2.75218432, 2.48451398, 3.35813859, 2.87442884,
       2.82360049, 2.98930169, 3.19570637, 3.24296515, 3.20050203,
       2.92521662, 2.90682194, 3.34646286, 2.92677424, 2.98467072,
       2.92533118, 2.84240541, 2.77435132, 2.77996124, 2.72930558,
       2.7494357 , 3.25586925, 2.89901121, 3.24759431, 3.12760598,
       2.97224597, 3.20717795, 3.27216971, 3.34887515, 2.95084293,
       3.17610216, 2.75051332, 3.11152373, 3.18825319, 3.1018485 ,
       2.58612446, 3.25673937, 2.64319436, 3.02387556, 3.12077227,
       2.75856891, 3.15146408, 3.30468879, 3.11267899, 3.07376392])

In [13]: t, x, y = d['t'], d['x'], d['y']

In [14]: f, ax = plt.subplots()

In [15]: ax.plot(t, x, marker='', label='x')
Out[15]: [<matplotlib.lines.Line2D at 0x7f3b511ef520>]

In [16]: ax.plot(t, y, marker='', label='y')
Out[16]: [<matplotlib.lines.Line2D at 0x7f3b590dfd60>]

In [17]: absd = absdiff(x, y)

In [18]: absd
Out[18]:
array([0.9689862 , 2.67942187, 1.32219985, 2.79367271, 1.52974857,
       2.24673555, 2.48986087, 1.37594033, 2.14739214, 2.35103262,
       1.97205816, 2.12695591, 2.23210658, 2.11975529, 1.95937581,
       0.94688536, 1.48102617, 1.49492248, 2.0461671 , 1.56195407,
       2.02018234, 1.82050107, 1.53746297, 2.47220408, 2.32799372,
       1.51963938, 2.92680476, 2.23768913, 1.18399113, 2.41707762,
       2.93404304, 2.11170928, 2.31520196, 2.16364132, 2.51526389,
       2.74893453, 3.4792416 , 0.57864333, 1.91124516, 2.19560846,
       1.06955541, 2.33482444, 3.34683832, 2.91787602, 1.4818474 ,
       1.97518716, 1.6998513 , 1.6731658 , 2.29085834, 2.04217446,
       1.73344817, 2.15035992, 1.47308409, 1.73639033, 1.52334249,
       2.23013511, 3.05723346, 2.27969742, 2.32177634, 2.06637256,
       2.18481305, 2.07326731, 1.48988768, 1.53307375, 2.06687265,
       3.14646079, 1.95891217, 1.8015147 , 2.10188701, 1.26820861,
       1.53136458, 1.16499143, 1.44155387, 1.86025777, 1.99457237,
       2.47694579, 1.79590636, 2.05924886, 1.49323292, 1.1204789 ,
       1.27062488, 2.13314886, 3.50411936, 1.95884936, 2.31237655,
       2.4621753 , 1.55153745, 1.65454988, 1.67553695, 2.48747847,
       2.47318966, 1.92819655, 1.88238105, 1.2164432 , 2.20006448,
       1.44740041, 1.81873675, 2.8303953 , 2.14229948, 1.6801376 ,
       2.93028534, 1.70805811, 2.03120162, 1.57729825, 1.90118178,
       2.40075614, 1.09350043, 2.10383525, 0.91627951, 2.06736991,
       2.15361601, 2.52844919, 2.24499319, 1.54496505, 2.37334477,
       1.52710699, 1.87646738, 1.76939016, 2.42608081, 2.13665071,
       2.17535108, 2.25361197, 1.60619437, 2.75962348, 1.20510057,
       2.15038874, 2.05042314, 1.56630596, 2.60899002, 2.35159247,
       2.23393428, 2.72725206, 2.30560247, 1.62718321, 1.58387333,
       2.62766513, 2.35940672, 1.84234037, 1.82892433, 1.58825864,
       2.38863155, 0.99949651, 2.35429767, 2.5845763 , 1.32377327,
       1.8633153 , 2.03525544, 1.54791706, 3.21883206, 2.57326894,
       2.5276375 , 2.47057488, 1.47638804, 0.79898508, 2.21685067,
       2.25279715, 1.96970275, 1.37480294, 2.11867606, 1.69507623,
       1.34254628, 2.64580067, 1.39882041, 2.3867082 , 2.25439568,
       1.38669415, 1.61664341, 2.22717471, 1.86191942, 2.12840161,
       2.32778892, 2.62780718, 2.01377495, 1.36642849, 3.14966039,
       2.49842989, 1.47302019, 1.06859746, 1.12970334, 2.08534743,
       2.68556078, 3.37186829, 2.33338649, 2.06351055, 2.98273145,
       1.73545734, 2.73500318, 1.44401385, 1.63768814, 2.70751324,
       2.31568191, 1.79575011, 2.30896316, 2.01791362, 2.50629365,
       2.06889348, 1.9674407 , 3.24697487, 2.25653068, 1.99994518,
       2.41274709, 2.24645332, 2.30838535, 2.23833404, 2.38990366,
       1.63680802, 2.67174472, 1.94702201, 3.22944953, 2.84418118,
       2.46157472, 2.08493744, 1.75761953, 1.92615034, 1.06071526,
       1.97086374, 2.3279889 , 2.73800664, 1.88224822, 2.35719751,
       1.26471444, 2.86968343, 1.17781955, 3.11252715, 1.61712238,
       1.13611357, 2.36688008, 2.33912979, 2.14797135, 1.74668798,
       2.0880446 , 3.13342304, 1.66796227, 2.05708894, 2.1831612 ,
       2.09917925, 2.68712633, 1.95542998, 3.04132013, 1.94351885,
       1.97399439, 2.11461834, 2.15391626, 2.18298626, 1.40258546,
       1.53536398, 2.21249743, 1.56907677, 2.00339898, 2.0811918 ,
       2.32317141, 1.97301866, 2.44404682, 2.17704845, 2.14602747,
       2.09088013, 1.72038025, 1.41507324, 1.71424287, 1.73839183,
       1.3997108 , 1.81542399, 1.59461031, 2.77929668, 1.56315997,
       1.56981807, 2.17272244, 1.86813548, 0.90566571, 2.37349993,
       1.79623298, 1.57094926, 1.90902657, 1.59187307, 2.84605185,
       2.16816782, 2.68241108, 1.28025588, 2.35634282, 2.12627914,
       1.48811929, 1.65523481, 1.38939868, 2.99483263, 2.3179898 ,
       2.26005658, 1.62157215, 2.18536789, 1.55601352, 1.75653356,
       1.44442037, 1.59240562, 1.17013829, 1.97910007, 1.81601493,
       1.89530725, 3.04461328, 2.19631008, 2.31976668, 1.84991615,
       2.27088889, 2.35810842, 3.39112472, 2.3256685 , 1.38272531,
       2.24243586, 2.07903826, 2.316402  , 2.69883289, 0.72332226,
       2.17810682, 1.03862358, 0.76830618, 1.05584159, 2.15578328,
       1.8715754 , 1.80759338, 2.05792639, 1.1520256 , 2.65347572,
       2.47919806, 1.69326087, 2.51503242, 2.21091419, 1.59149586,
       1.20283254, 2.29134232, 1.690278  , 2.53288774, 1.55250946,
       1.84064693, 1.35585044, 2.27398537, 2.20732072, 2.10438978,
       2.12314745, 2.29486218, 1.59601585, 1.94707027, 3.11523301,
       2.22369124, 1.95663623, 2.35303665, 1.85433949, 1.96652215,
       2.76809132, 1.2142309 , 2.69901118, 1.45714752, 2.15383387,
       1.41756773, 1.37860289, 2.05339667, 1.25948736, 2.68325208,
       2.19216804, 2.69723419, 1.27762154, 1.17768157, 2.50411393,
       1.61689497, 1.08380452, 4.09897098, 1.51146659, 1.45399108,
       3.13016756, 2.35895631, 2.3673044 , 2.2560799 , 2.06690051,
       2.34679079, 1.5866927 , 1.54465899, 2.50822375, 2.13030395,
       2.30901511, 2.9517382 , 2.22148394, 2.70325557, 2.29248375,
       1.92711782, 1.94944432, 2.48234224, 2.10922795, 2.34244901,
       2.39073524, 0.92870083, 1.09541306, 0.72799443, 3.36319336,
       3.06742333, 2.04145143, 1.07521708, 1.61835178, 2.0270265 ,
       1.96208638, 1.60083539, 3.18150563, 2.49426671, 2.70435103,
       1.94775494, 3.412288  , 2.25563205, 2.07789889, 1.10075241,
       1.83783395, 2.2192503 , 1.23906728, 2.73483033, 2.23375291,
       1.31322513, 2.47433677, 2.10080387, 2.47462252, 2.86497033,
       2.72626565, 1.22764551, 1.00487041, 1.68571771, 0.89667146,
       1.09074846, 2.20711182, 2.49603755, 2.5785525 , 1.80622738,
       2.56340657, 2.02544019, 2.29768378, 2.84746761, 1.51267069,
       1.28131511, 1.0870002 , 1.82524038, 0.47879015, 2.85214041,
       1.34718439, 2.58233246, 2.33294967, 1.2752483 , 3.01807903,
       3.24747731, 2.47773668, 3.12692871, 2.47950358, 2.13487769,
       2.29483439, 2.45839964, 2.27822201, 1.89821251, 1.60811307,
       2.04680958, 2.21864274, 3.33409296, 1.90081235, 2.44567712,
       2.7730831 , 1.7667406 , 2.86082788, 2.15259061, 2.46331453,
       1.14177021, 2.20180292, 1.43199319, 2.57795114, 2.2500598 ,
       1.47424087, 2.42840307, 1.25611973, 2.01950424, 1.77027374,
       1.77227487, 2.3889846 , 1.03555385, 3.39935784, 2.63275439,
       1.92045985, 2.0489505 , 1.86254188, 2.40922318, 1.99270623,
       1.46779675, 1.89647969, 1.3763742 , 1.95552908, 1.72900092,
       1.91462822, 1.47479131, 2.09909048, 2.03270365, 1.54654794,
       1.99500725, 2.34114357, 1.24147274, 2.43438909, 1.18497223,
       1.75354589, 1.93568816, 1.28609692, 1.77292075, 1.54769158,
       1.86793441, 1.97131901, 3.32653702, 0.78833378, 0.97564411,
       1.67920196, 1.09382394, 2.42506259, 3.2898753 , 2.69874243,
       1.3649013 , 2.03255691, 2.18243416, 1.45070278, 1.23493938,
       3.35242077, 1.70870123, 1.56951511, 2.87600571, 2.34628099,
       2.22857547, 0.87481934, 2.46432578, 2.65168701, 3.53729403,
       1.83186598, 2.51007628, 1.54264841, 1.63638635, 1.60160908,
       2.34460831, 1.75094724, 2.53249844, 1.54423951, 2.48883036,
       1.40244077, 1.10980493, 2.90265185, 1.63419924, 2.04252381,
       1.8291285 , 2.2793165 , 1.2699684 , 1.41756521, 1.25298065,
       1.58866113, 2.35088013, 1.99876494, 1.73491825, 1.11754423,
       2.49636377, 2.22719697, 2.05776826, 1.17453874, 1.63487386,
       2.28279682, 2.12335322, 1.16774369, 2.42533114, 1.69315164,
       1.81553513, 1.78110162, 0.62683462, 2.05843982, 2.6551073 ,
       1.69760286, 2.06712334, 1.28853244, 1.71244032, 2.60582022,
       2.53022425, 1.57591318, 2.92071237, 2.47647655, 2.13895252,
       2.00836619, 2.50711397, 1.75529499, 1.18468879, 1.08486402,
       1.85569397, 1.97717828, 2.062198  , 2.62421534, 2.38113568,
       1.14413788, 2.32417989, 2.38719473, 1.86038289, 1.45332947,
       1.99174606, 2.30019392, 1.57606121, 1.13051637, 3.08010192,
       1.65096279, 2.37685794, 2.59822028, 2.54421799, 2.59131023,
       1.20453126, 2.10906053, 2.38910843, 1.56991446, 1.71221651,
       1.1962074 , 1.22885378, 2.54882207, 1.7093344 , 1.27211142,
       1.55143442, 1.5492855 , 2.38646604, 1.28257782, 2.67850863,
       1.99514516, 1.63096322, 2.72730952, 2.00819516, 1.81681723,
       3.2266169 , 1.33484272, 2.71793797, 1.33889297, 2.43657093,
       2.71651761, 2.27156439, 2.58853458, 1.78963488, 1.21065457,
       2.15217644, 2.7060504 , 1.14754397, 2.10426255, 1.62244676,
       1.13998921, 2.65434729, 1.26711877, 2.01776139, 2.78664105,
       2.76676532, 1.80907843, 1.95127982, 2.05868131, 1.6464467 ,
       2.11848413, 2.37810262, 1.72424058, 2.30119333, 2.30095725,
       1.74425202, 2.31156627, 2.83651168, 1.8498788 , 1.7488375 ,
       1.96959013, 2.01074692, 2.16533072, 2.61129988, 1.71327272,
       2.18771763, 1.12245745, 1.91261716, 2.62249535, 2.11086128,
       1.8912557 , 2.51677643, 2.29834252, 1.56285411, 2.49354229,
       2.80828487, 2.69854066, 2.45504143, 2.0782764 , 2.67448629,
       1.70606895, 2.31723422, 1.69530034, 2.90326405, 2.53168535,
       2.34736504, 1.94904507, 1.802209  , 1.68539541, 2.519868  ,
       2.18453792, 2.28374513, 2.14915451, 1.50482097, 2.71386056,
       1.3280075 , 2.27188   , 2.00462446, 2.36137152, 2.27856871,
       1.95434437, 2.359359  , 3.17107084, 1.98533222, 2.46337308,
       1.54287931, 1.88651287, 2.18777331, 1.8658766 , 1.6362582 ,
       2.08268046, 1.80532743, 0.90234128, 2.60493714, 1.0190581 ,
       2.14289408, 2.29812706, 2.83635186, 2.28769136, 1.68908973,
       1.83803709, 1.64744048, 1.38267868, 1.52787214, 2.13922025,
       2.30042678, 1.652903  , 2.27408907, 2.94265575, 1.42916581,
       2.58238113, 1.54289522, 2.44790326, 1.50986755, 2.94069825,
       2.40119644, 2.26799041, 1.80453242, 1.70832928, 0.40023765,
       1.99804604, 2.68173848, 1.62403605, 1.63312845, 1.46507499,
       2.89246091, 1.21622742, 1.94882871, 2.5654701 , 1.52527499,
       1.53918983, 2.65388433, 1.82591879, 0.85839508, 1.57668758,
       2.77866513, 2.23897736, 2.22468863, 2.00651515, 2.37952676,
       2.28214338, 1.55182655, 1.96254911, 2.33259511, 3.72028297,
       1.81803416, 1.8979899 , 1.72989039, 1.52935749, 2.5416731 ,
       2.14533124, 1.19400613, 1.72698377, 1.27742772, 2.75296313,
       1.69913652, 2.30533074, 2.41752775, 2.32904736, 1.65458581,
       2.49576722, 1.45389353, 1.52462579, 2.9040417 , 1.64647272,
       2.90007272, 2.42026983, 1.78716363, 2.43181333, 1.67225237,
       3.05749239, 1.76845449, 1.32015111, 2.4257514 , 2.54263068,
       1.24964463, 2.13547363, 2.06296329, 2.12237169, 1.20551981,
       1.71044108, 2.38333722, 2.0776615 , 1.12479002, 2.45969474,
       1.63813417, 1.96453236, 3.20542498, 2.64042883, 2.54041388,
       1.86053101, 1.09670204, 1.71197684, 2.87683419, 1.58922819,
       1.60311803, 2.04146193, 3.25482552, 2.56901687, 2.08036525,
       1.85282542, 1.95885915, 0.63399874, 3.30460362, 1.49444652,
       1.51025793, 2.30544675, 2.37324513, 1.68782831, 3.82302766,
       1.91251348, 1.92456975, 1.89503394, 1.42356042, 0.77487352,
       2.23397163, 2.24942629, 1.76993249, 1.8115839 , 1.32831706,
       1.5257832 , 1.87728631, 1.80095599, 1.61731077, 1.36363014,
       1.60981329, 1.91305697, 1.85071628, 1.98761661, 2.36645993,
       2.39112706, 2.16670478, 1.73299545, 2.77928622, 2.36392063,
       1.96179219, 2.97484824, 2.69915516, 2.34283488, 1.81264284,
       2.46544247, 1.28105178, 2.50902835, 1.9704968 , 1.71861678,
       1.78420179, 2.98656905, 3.22902479, 1.48632758, 1.78016436,
       2.87682373, 2.48773019, 1.75174271, 2.26866151, 1.76518984,
       1.35174108, 2.45950229, 1.72869751, 3.34709747, 2.79992237,
       2.82358456, 2.18190475, 1.46901   , 1.84026465, 1.82960569,
       1.58276077, 1.81775159, 1.90641083, 2.5869738 , 1.16715487,
       1.77333782, 2.08158863, 1.86276393, 2.51911637, 2.49723994,
       1.96748963, 2.16295357, 1.86060673, 1.58654113, 1.3884896 ,
       0.88652888, 1.06695629, 1.65655821, 2.12122002, 1.4951251 ,
       1.65112697, 2.48059572, 1.99094762, 1.52231653, 1.94554034,
       1.47471181, 2.47373518, 2.47698307, 2.35155471, 1.38532383,
       2.56855108, 1.06519055, 1.78785402, 2.05934445, 1.23234232,
       2.59729231, 2.16711274, 2.04936226, 2.17250224, 2.27227502,
       3.23734873, 2.15955543, 1.88454861, 1.68526412, 2.77108415,
       2.85750654, 1.50568181, 1.14374628, 1.5076756 , 2.51729772,
       2.05326316, 2.95046217, 1.98032936, 2.24020031, 1.8751033 ,
       2.33842343, 2.23496586, 1.93440161, 1.50514221, 0.82417221,
       1.55317058, 2.94069998, 2.42726564, 2.18845567, 1.53215815,
       0.74779912, 1.81295186, 2.32559056, 3.33777717, 2.33359351,
       1.53645259, 1.8457627 , 0.96922782, 3.18370351, 1.91427091,
       2.00766639, 2.96260254, 2.2924446 , 1.82751168, 2.61153714,
       3.036597  , 1.64552268, 2.12646628, 2.47129133, 1.79738335,
       1.73666766, 1.93282233, 1.83799514, 2.74348526, 2.03137014,
       2.4163221 , 2.00259225, 2.03740424, 1.49045527, 2.19026237,
       2.50440332, 1.12184967, 1.56356533, 1.935848  , 1.93361754,
       2.45630197, 1.19705324, 1.06177379, 1.94360131, 1.38420066,
       2.14505579, 3.01804689, 2.75777395, 1.75939969, 0.98132751,
       2.81631641, 0.95098859, 2.19001025, 1.91292364, 2.07379946,
       2.69706027, 2.23770512, 1.72821925, 3.1602094 , 1.87533109])

In [19]: ax.plot(t, absd, marker='', label='absd')
Out[19]: [<matplotlib.lines.Line2D at 0x7f3b58bc8b20>]

In [20]: ax.set_xlabel('Time (s)')
Out[20]: Text(0.5, 13.94444444444443, 'Time (s)')

In [21]: ax.set_ylabel('Position (cm)')
Out[21]: Text(13.944444444444445, 0.5, 'Position (cm)')

In [22]: ax.set_title('Time series')
Out[22]: Text(0.5, 1.0, 'Time series')

In [23]: ax.legend()
Out[23]: <matplotlib.legend.Legend at 0x7f3b50b1d460>

In [24]: f.savefig('time_series.png')

In [25]: ls
distributions.png  homework4.pdf           student_solutions/
homework4.md       homework4_samples.py    t_absd.npz
homework4.npz      homework4_solutions.py  time_series.png

In [26]: f2, ax2 = plt.subplots()

In [27]: bins = np.arange(0, 7, 0.1)

In [28]: bins
Out[28]:
array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
       1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
       2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
       3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
       5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
       6.5, 6.6, 6.7, 6.8, 6.9])

In [29]: ax2.hist(x, bins=bins, label='x')
Out[29]:
(array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,  3.,  7.,
        12., 10., 26., 26., 29., 41., 52., 56., 68., 70., 83., 75., 83.,
        75., 67., 43., 42., 34., 29., 21., 12., 18.,  3.,  6.,  3.,  2.,
         0.,  1.,  1.,  0.]),
 array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
        1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
        2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
        3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
        5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
        6.5, 6.6, 6.7, 6.8, 6.9]),
 <BarContainer object of 69 artists>)

In [30]: ax2.hist(y, bins=bins, label='y')
Out[30]:
(array([  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   2.,
          3.,   7.,  15.,  31.,  63., 105., 133., 140., 150., 131., 109.,
         64.,  22.,  16.,   7.,   1.,   1.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.]),
 array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
        1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
        2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
        3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
        5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
        6.5, 6.6, 6.7, 6.8, 6.9]),
 <BarContainer object of 69 artists>)

In [31]: ax2.hist(absd, bins=bins, label='absd')
Out[31]:
(array([ 0.,  0.,  0.,  0.,  2.,  1.,  2.,  7.,  5., 11., 20., 29., 33.,
        28., 36., 67., 54., 55., 65., 69., 64., 71., 64., 75., 57., 39.,
        33., 28., 18., 19.,  9., 11., 10., 11.,  2.,  2.,  0.,  1.,  1.,
         0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.]),
 array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
        1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
        2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
        3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
        5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
        6.5, 6.6, 6.7, 6.8, 6.9]),
 <BarContainer object of 69 artists>)

In [32]: ax2.set_xlabel('Position (cm)')
Out[32]: Text(0.5, 13.94444444444443, 'Position (cm)')

In [33]: ax2.set_ylabel('Bin counts')
Out[33]: Text(13.944444444444452, 0.5, 'Bin counts')

In [34]: ax2.set_title('Distributions')
Out[34]: Text(0.5, 1.0, 'Distributions')

In [35]: ax2.legend()
Out[35]: <matplotlib.legend.Legend at 0x7f3b58bc8100>

In [36]: f2.savefig('distributions.png')

In [37]: ls
distributions.png  homework4.pdf           student_solutions/
homework4.md       homework4_samples.py    t_absd.npz
homework4.npz      homework4_solutions.py  time_series.png

In [38]: np.savez('t_absd.npz', t=t, absd=absd)

In [39]: ls
distributions.png  homework4.pdf           student_solutions/
homework4.md       homework4_samples.py    t_absd.npz
homework4.npz      homework4_solutions.py  time_series.png

In [40]: plt.close('all')

In [41]: pwd
Out[41]: '/home/mspacek/SciPyCourse2022/notes/homework4'

In [42]: run homework4_solutions.py

In [43]: run homework4_solutions.py

In [44]: ax2.legend?

In [45]: f2.show()

In [46]: ax2.legend(loc='upper left')
Out[46]: <matplotlib.legend.Legend at 0x7f3b306e6640>

In [47]: f2, ax2 = plt.subplots()

In [48]: bins = np.arange(0, 7.5, 0.1)
    ...: ax2.hist(x, bins=bins, label='x')
    ...: ax2.hist(y, bins=bins, label='y')
    ...: ax2.hist(absd, bins=bins, label='absd')
    ...: ax2.set_xlabel('Position (cm)')
    ...: ax2.set_title('Distributions')
Out[48]: Text(0.5, 1.0, 'Distributions')

In [49]: ax2.legend?

In [50]: ax2.legend(loc='upper left')
Out[50]: <matplotlib.legend.Legend at 0x7f3b64809370>

In [51]: x = np.load('homework4.npz')

In [52]: np.load(x)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Input In [52], in <cell line: 1>()
----> 1 np.load(x)

File /usr/local/lib/python3.8/dist-packages/numpy/lib/npyio.py:417, in load(file, mmap_mode, allow_pickle, fix_imports, encoding)
    415     own_fid = False
    416 else:
--> 417     fid = stack.enter_context(open(os_fspath(file), "rb"))
    418     own_fid = True
    420 # Code to distinguish from NumPy binary files and pickles.

TypeError: expected str, bytes or os.PathLike object, not NpzFile
> /usr/local/lib/python3.8/dist-packages/numpy/lib/npyio.py(417)load()
    415             own_fid = False
    416         else:
--> 417             fid = stack.enter_context(open(os_fspath(file), "rb"))
    418             own_fid = True
    419

ipdb> c

In [53]: np.load?

In [54]: import skimage

In [55]:
mspacek@Godel:~/SciPyCourse2022/notes/08_images$ pip install scikit-image
WARNING: The directory '/home/mspacek/.cache/pip' or its parent directory is not owned or is not writable by the current user. The cache has been disabled. Check the permissions and owner of that directory. If executing pip with sudo, you should use sudo's -H flag.
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: scikit-image in /usr/local/lib/python3.8/dist-packages (0.19.2)
Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.8/dist-packages (from scikit-image) (21.3)
Requirement already satisfied: tifffile>=2019.7.26 in /usr/local/lib/python3.8/dist-packages (from scikit-image) (2022.3.16)
Requirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.8/dist-packages (from scikit-image) (1.21.6)
Requirement already satisfied: imageio>=2.4.1 in /usr/local/lib/python3.8/dist-packages (from scikit-image) (2.16.1)
Requirement already satisfied: networkx>=2.2 in /usr/local/lib/python3.8/dist-packages (from scikit-image) (2.7.1)
Requirement already satisfied: pillow!=7.1.0,!=7.1.1,!=8.3.0,>=6.1.0 in /usr/local/lib/python3.8/dist-packages (from scikit-image) (9.0.1)
Requirement already satisfied: PyWavelets>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from scikit-image) (1.3.0)
Requirement already satisfied: scipy>=1.4.1 in /usr/local/lib/python3.8/dist-packages (from scikit-image) (1.8.0)
Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/lib/python3/dist-packages (from packaging>=20.0->scikit-image) (2.4.6)
mspacek@Godel:~/SciPyCourse2022/notes/08_images$ sudo pip3 install scikit-image
[sudo] password for mspacek:
mspacek@Godel:~/SciPyCourse2022/notes/08_images$ ipython
Python 3.8.10 (default, Mar 15 2022, 12:22:08)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.1.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import scipy

In [2]: import skimage

In [3]: from scipy import ndimage

In [4]: skimage
Out[4]: <module 'skimage' from '/usr/local/lib/python3.8/dist-packages/skimage/__init__.py'>

In [5]: from skimage import io

In [6]: io.imread?
Signature: io.imread(fname, as_gray=False, plugin=None, **plugin_args)
Docstring:
Load an image from file.

Parameters
----------
fname : string
    Image file name, e.g. ``test.jpg`` or URL.
as_gray : bool, optional
    If True, convert color images to gray-scale (64-bit floats).
    Images that are already in gray-scale format are not converted.
plugin : str, optional
    Name of plugin to use.  By default, the different plugins are
    tried (starting with imageio) until a suitable
    candidate is found.  If not given and fname is a tiff file, the
    tifffile plugin will be used.

Other Parameters
----------------
plugin_args : keywords
    Passed to the given plugin.

Returns
-------
img_array : ndarray
    The different color bands/channels are stored in the
    third dimension, such that a gray-image is MxN, an
    RGB-image MxNx3 and an RGBA-image MxNx4.
File:      /usr/local/lib/python3.8/dist-packages/skimage/io/_io.py
Type:      function

In [7]: pwd
Out[7]: '/home/mspacek/SciPyCourse2022/notes/08_images'

In [8]: ls
08_history.txt  08_images.md  08_images.pdf  face_alpha.png  face_gray.png  face.png  movie.avi  ohki2005.png

In [9]: faceg = io.imread('face_gray.png')

In [10]: type(faceg)
Out[10]: numpy.ndarray

In [11]: faceg.shape
Out[11]: (782, 782)

In [12]: faceg.dtype
Out[12]: dtype('uint8')

In [13]: 2**8-1
Out[13]: 255

In [14]: faceg.min()
Out[14]: 0

In [15]: faceg.max()
Out[15]: 255

In [16]: f, ax = plt.subplots()

In [17]: im = ax.imshow(faceg)

In [18]: im.set_cmap('gray')

In [19]: from scipy import ndimage

In [20]: ndimage.rotate?

In [21]: face45 = ndimage.rotate(faceg, 45)

In [22]: face45.shape
Out[22]: (1106, 1106)

In [23]: faceg.shape
Out[23]: (782, 782)

In [24]: f, ax = plt.subplots()

In [25]: ax.imshow(face45, cmap='gray')
Out[25]: <matplotlib.image.AxesImage at 0x7f1f839cce50>

In [26]: plt.close('all')

In [27]: f, ax = plt.subplots()

In [28]: faceg.shape
Out[28]: (782, 782)

In [29]: lowres = faceg[::10 , ::10]

In [30]: lowres.shape
Out[30]: (79, 79)

In [31]: f, ax = plt.subplots()

In [32]: ax.imshow(lowres, cmap='gray')
Out[32]: <matplotlib.image.AxesImage at 0x7f1f7c13deb0>

In [33]: f, ax = plt.subplots()

In [34]: ax.imshow(lowres, cmap='gray')
Out[34]: <matplotlib.image.AxesImage at 0x7f1f7c11ce80>

In [35]: f, ax = plt.subplots()

In [36]: ax.imshow(lowres, cmap='gray', interpolation='gaussian')
Out[36]: <matplotlib.image.AxesImage at 0x7f1f7c0fd070>

In [37]: from skimage import filters

In [38]: lowresgauss = filters.gaussian(lowres, sigma=2)

In [39]: f, ax = plt.subplots()

In [40]: ax.imshow(lowresgauss, cmap='gray')
Out[40]: <matplotlib.image.AxesImage at 0x7f1f7c360ac0>

In [41]: lowresgauss
Out[41]:
array([[1.        , 1.        , 1.        , ..., 1.        , 1.        ,
        1.        ],
       [1.        , 1.        , 1.        , ..., 1.        , 1.        ,
        1.        ],
       [1.        , 1.        , 1.        , ..., 1.        , 1.        ,
        1.        ],
       ...,
       [0.99999998, 0.99999993, 0.99999972, ..., 0.99999972, 0.99999993,
        0.99999998],
       [1.        , 0.99999999, 0.99999997, ..., 0.99999997, 0.99999999,
        1.        ],
       [1.        , 1.        , 1.        , ..., 1.        , 1.        ,
        1.        ]])

In [42]: lowresgauss.shape
Out[42]: (79, 79)

In [43]: biglowresgauss = ndimage.zoom(lowresgauss, 10)

In [44]: biglowresgauss.shape
Out[44]: (790, 790)

In [45]: f, ax = plt.subplots()

In [46]: ax.imshow(biglowresgauss, cmap='gray')
Out[46]: <matplotlib.image.AxesImage at 0x7f1f7c1d48e0>

In [47]: from skimage import data

In [48]: data = data.moon()

In [49]: plt.close('all')

In [50]: f, ax = plt.subplots(1, 2)

In [51]: moon.shape
-----------------------------------------------------------------------
NameError                             Traceback (most recent call last)
Input In [51], in <cell line: 1>()
----> 1 moon.shape

NameError: name 'moon' is not defined
> <ipython-input-51-5604953ec413>(1)<cell line: 1>()
----> 1 moon.shape

ipdb> c

In [52]: moon = data.moon()
-----------------------------------------------------------------------
AttributeError                        Traceback (most recent call last)
Input In [52], in <cell line: 1>()
----> 1 moon = data.moon()

AttributeError: 'numpy.ndarray' object has no attribute 'moon'
> <ipython-input-52-64658bee9450>(1)<cell line: 1>()
----> 1 moon = data.moon()

ipdb> c

In [53]: from skimage import data

In [54]: moon = data.moon()

In [55]: moon.shape
Out[55]: (512, 512)

In [56]: moon.dtype
Out[56]: dtype('uint8')

In [57]: moon.min()
Out[57]: 0

In [58]: moon.max()
Out[58]: 255

In [59]: ax[0].imshow(moon, cmap='gray')
Out[59]: <matplotlib.image.AxesImage at 0x7f1f752da8e0>

In [60]: ax[1].hist(moon.ravel(), bins=np.arange(256+1))
Out[60]:
(array([2.4000e+02, 0.0000e+00, 6.0000e+01, 3.6000e+01, 0.0000e+00,
        6.0000e+01, 5.2000e+01, 0.0000e+00, 5.2000e+01, 0.0000e+00,
        6.0000e+01, 8.0000e+01, 0.0000e+00, 4.0000e+00, 4.4000e+01,
        0.0000e+00, 5.6000e+01, 0.0000e+00, 8.8000e+01, 7.2000e+01,
        0.0000e+00, 8.0000e+01, 7.6000e+01, 0.0000e+00, 5.2000e+01,
        6.8000e+01, 0.0000e+00, 6.4000e+01, 0.0000e+00, 8.8000e+01,
        8.0000e+01, 0.0000e+00, 7.2000e+01, 4.0000e+01, 0.0000e+00,
        7.2000e+01, 3.6000e+01, 0.0000e+00, 4.8000e+01, 6.4000e+01,
        0.0000e+00, 6.4000e+01, 4.8000e+01, 0.0000e+00, 2.8000e+01,
        7.6000e+01, 0.0000e+00, 8.4000e+01, 7.6000e+01, 8.8000e+01,
        0.0000e+00, 8.0000e+01, 1.0800e+02, 0.0000e+00, 5.2000e+01,
        7.6000e+01, 9.2000e+01, 0.0000e+00, 8.8000e+01, 1.0000e+02,
        1.0000e+02, 0.0000e+00, 1.0400e+02, 0.0000e+00, 1.3200e+02,
        1.0800e+02, 0.0000e+00, 1.4800e+02, 1.2400e+02, 1.6800e+02,
        1.6000e+02, 1.6000e+02, 0.0000e+00, 2.1200e+02, 2.0800e+02,
        1.8000e+02, 2.0000e+02, 2.6400e+02, 2.1600e+02, 2.2000e+02,
        3.1200e+02, 2.2400e+02, 2.7200e+02, 2.9600e+02, 2.8400e+02,
        3.1600e+02, 2.5200e+02, 5.3600e+02, 3.6800e+02, 4.0800e+02,
        3.7200e+02, 8.2400e+02, 3.5200e+02, 5.9600e+02, 4.5600e+02,
        8.6000e+02, 9.1600e+02, 4.0000e+02, 8.8000e+02, 9.0800e+02,
        5.8000e+02, 1.8600e+03, 1.4160e+03, 2.5640e+03, 2.0360e+03,
        3.3920e+03, 5.9280e+03, 5.7240e+03, 1.1964e+04, 1.1436e+04,
        1.6256e+04, 1.7772e+04, 2.0324e+04, 2.1444e+04, 1.7484e+04,
        2.3296e+04, 1.6144e+04, 1.2096e+04, 1.1748e+04, 9.4080e+03,
        9.0200e+03, 5.0800e+03, 5.3160e+03, 2.7760e+03, 1.3640e+03,
        2.0560e+03, 8.7200e+02, 1.2600e+03, 8.6800e+02, 3.7600e+02,
        5.5200e+02, 1.7600e+02, 4.3200e+02, 1.9200e+02, 1.5600e+02,
        2.5200e+02, 1.1200e+02, 1.3600e+02, 1.1600e+02, 1.0400e+02,
        8.8000e+01, 1.1600e+02, 1.0000e+02, 8.8000e+01, 6.0000e+01,
        1.0800e+02, 7.6000e+01, 1.1600e+02, 8.8000e+01, 7.6000e+01,
        6.8000e+01, 9.2000e+01, 7.2000e+01, 0.0000e+00, 4.4000e+01,
        6.4000e+01, 5.6000e+01, 0.0000e+00, 1.1200e+02, 7.2000e+01,
        7.6000e+01, 0.0000e+00, 9.6000e+01, 5.2000e+01, 0.0000e+00,
        0.0000e+00, 3.2000e+01, 4.4000e+01, 0.0000e+00, 4.8000e+01,
        0.0000e+00, 7.6000e+01, 2.8000e+01, 0.0000e+00, 3.6000e+01,
        3.6000e+01, 0.0000e+00, 4.4000e+01, 0.0000e+00, 2.8000e+01,
        0.0000e+00, 2.0000e+01, 5.2000e+01, 0.0000e+00, 2.0000e+01,
        0.0000e+00, 3.2000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        2.0000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00, 1.2000e+01,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 2.8000e+01, 0.0000e+00, 8.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6000e+01,
        0.0000e+00, 8.0000e+00, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        2.8000e+01, 0.0000e+00, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 0.0000e+00, 3.6000e+01, 0.0000e+00,
        4.8000e+01, 0.0000e+00, 0.0000e+00, 2.4000e+01, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 3.6000e+01, 0.0000e+00, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        4.0000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <BarContainer object of 256 artists>)

In [61]: moon[moon < 75] = 75

In [62]: moon[moon > 150] = 150

In [63]: moon.min()
Out[63]: 75

In [64]: moon.max()
Out[64]: 150

In [65]: f, ax = plt.subplots(1, 2)

In [66]: ax[0].imshow(moon, cmap='gray')
Out[66]: <matplotlib.image.AxesImage at 0x7f1f749e6c10>

In [67]: ax[0].imshow(moon, cmap='gray', vmin=0, vmax=255)
Out[67]: <matplotlib.image.AxesImage at 0x7f1f7483e4f0>

In [68]: ax[0].imshow(moon, cmap='gray', vmin=75, vmax=150)
Out[68]: <matplotlib.image.AxesImage at 0x7f1f74a96490>

In [69]: ax[1].hist(moon.ravel(), bins=np.arange(256+1))
Out[69]:
(array([    0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,  4608.,   200.,   264.,   216.,   220.,
          312.,   224.,   272.,   296.,   284.,   316.,   252.,   536.,
          368.,   408.,   372.,   824.,   352.,   596.,   456.,   860.,
          916.,   400.,   880.,   908.,   580.,  1860.,  1416.,  2564.,
         2036.,  3392.,  5928.,  5724., 11964., 11436., 16256., 17772.,
        20324., 21444., 17484., 23296., 16144., 12096., 11748.,  9408.,
         9020.,  5080.,  5316.,  2776.,  1364.,  2056.,   872.,  1260.,
          868.,   376.,   552.,   176.,   432.,   192.,   156.,   252.,
          112.,   136.,   116.,   104.,    88.,   116.,   100.,    88.,
           60.,   108.,    76.,   116.,    88.,    76.,  1800.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <BarContainer object of 256 artists>)

In [70]: ax.imshow?
Object `ax.imshow` not found.

In [71]: plt.imshow?

In [72]: moon = data.moon()

In [73]: f, ax = plt.subplots()

In [74]: ax.imshow(moon, vmin=75, vmax=150, cmap='gray')
Out[74]: <matplotlib.image.AxesImage at 0x7f1f75e50e20>

In [75]: moon[moon < 75] = 75

In [76]: moon[moon > 150] = 150

In [77]: moon2 = (np.float64(data.moon()) - 75) / (150-75) * 255

In [78]: moon2.min()
Out[78]: -255.0

In [79]: moon2.max()
Out[79]: 612.0

In [80]: f, ax = plt.subplots()

In [81]: ax.imshow(moon, cmap='gray')
Out[81]: <matplotlib.image.AxesImage at 0x7f1f75054d90>

In [82]: ax.imshow(moon, cmap='gray', vmin=0, vmax=255)
Out[82]: <matplotlib.image.AxesImage at 0x7f1f7500aeb0>

In [83]: skimage.exposure
Out[83]: <module 'skimage.exposure' from '/usr/local/lib/python3.8/dist-packages/skimage/exposure/__init__.py'>

In [84]: moon.min()
Out[84]: 75

In [85]: moon2 = (np.float64(moon) - 75) / (150-75) * 255

In [86]: moon2.min()
Out[86]: 0.0

In [87]: moon2.max()
Out[87]: 255.0

In [88]: f, ax = plt.subplots()

In [89]: ax.imshow(moon, cmap='gray', vmin=0, vmax=255)
Out[89]: <matplotlib.image.AxesImage at 0x7f1f74db5130>

In [90]: ax.imshow(moon2, cmap='gray', vmin=0, vmax=255)
Out[90]: <matplotlib.image.AxesImage at 0x7f1f74d5d790>

In [91]: f, ax = plt.subplots()

In [92]: ax.imshow(moon2, cmap='gray')
Out[92]: <matplotlib.image.AxesImage at 0x7f1f74fe9a60>

In [93]: ax.imshow(moon2, cmap='gray', vmin=0, vmax=255)
Out[93]: <matplotlib.image.AxesImage at 0x7f1f74fe99d0>

In [94]: skimage.exposure
Out[94]: <module 'skimage.exposure' from '/usr/local/lib/python3.8/dist-packages/skimage/exposure/__init__.py'>

In [95]: plt.close('all')

In [96]: def cf():
    ...:     plt.close('all')
    ...:

In [97]: cf()

In [98]: ls
08_history.txt  08_images.pdf   face_gray.png  movie.avi
08_images.md    face_alpha.png  face.png       ohki2005.png

In [99]: from skimage import io

In [100]: ohki = io.imread('ohki2005.png')

In [101]: ohki.shape
Out[101]: (512, 491)

In [102]: f, ax = plt.subplots()

In [103]: ax.imshow(ohki, cmap='gray')
Out[103]: <matplotlib.image.AxesImage at 0x7f1f744fc250>

In [104]: np.rot90?

In [105]: np.rot90(ohki, -1)
Out[105]:
array([[1, 1, 1, ..., 1, 1, 1],
       [3, 3, 3, ..., 3, 3, 3],
       [5, 5, 5, ..., 6, 6, 6],
       ...,
       [3, 5, 7, ..., 6, 6, 6],
       [0, 2, 4, ..., 4, 4, 4],
       [0, 1, 2, ..., 2, 2, 2]], dtype=uint8)

In [106]: ohkicw = np.rot90(ohki, -1)

In [107]: f, ax = plt.subplots()

In [108]: ax.imshow(ohkicw, cmap='gray')
Out[108]: <matplotlib.image.AxesImage at 0x7f1f749a0340>

In [109]: im = ax.imshow(ohkicw, cmap='gray')

In [110]: im.set_cmap('viridis')

In [111]: im = ax.imshow(ohkicw)

In [112]: im.set_cmap('Spectral')

In [113]: im.set_cmap('coolwarm')

In [114]: im.set_cmap('Dark2')

In [115]: im.set_cmap('Pastel1')

In [116]: ohki
Out[116]:
array([[1, 3, 6, ..., 6, 4, 2],
       [1, 3, 6, ..., 6, 4, 2],
       [1, 3, 6, ..., 6, 4, 2],
       ...,
       [1, 3, 5, ..., 7, 4, 2],
       [1, 3, 5, ..., 5, 2, 1],
       [1, 3, 5, ..., 3, 0, 0]], dtype=uint8)

In [117]: f, ax = plt.subplots()

In [118]: ohki.min()
Out[118]: 0

In [119]: ohki.max()
Out[119]: 255

In [120]: binedges = np.arange(0, 256+1)

In [121]: binedges
Out[121]:
array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
       117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
       130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
       143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
       156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
       169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
       182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
       195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
       234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
       247, 248, 249, 250, 251, 252, 253, 254, 255, 256])

In [122]: ax.hist(ohki, bins=binedges)



^C-----------------------------------------------------------------------
KeyboardInterrupt                     Traceback (most recent call last)
Input In [122], in <cell line: 1>()
----> 1 ax.hist(ohki, bins=binedges)

File /usr/local/lib/python3.8/dist-packages/matplotlib/__init__.py:1412, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)
   1409 @functools.wraps(func)
   1410 def inner(ax, *args, data=None, **kwargs):
   1411     if data is None:
-> 1412         return func(ax, *map(sanitize_sequence, args), **kwargs)
   1414     bound = new_sig.bind(ax, *args, **kwargs)
   1415     auto_label = (bound.arguments.get(label_namer)
   1416                   or bound.kwargs.get(label_namer))

File /usr/local/lib/python3.8/dist-packages/matplotlib/axes/_axes.py:6698, in Axes.hist(self, x, bins, range, density, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, **kwargs)
   6696 else:
   6697     height = m
-> 6698 bars = _barfunc(bins[:-1]+boffset, height, width,
   6699                 align='center', log=log,
   6700                 color=c, **{bottom_kwarg: bottom})
   6701 patches.append(bars)
   6702 if stacked:

File /usr/local/lib/python3.8/dist-packages/matplotlib/__init__.py:1412, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)
   1409 @functools.wraps(func)
   1410 def inner(ax, *args, data=None, **kwargs):
   1411     if data is None:
-> 1412         return func(ax, *map(sanitize_sequence, args), **kwargs)
   1414     bound = new_sig.bind(ax, *args, **kwargs)
   1415     auto_label = (bound.arguments.get(label_namer)
   1416                   or bound.kwargs.get(label_namer))

File /usr/local/lib/python3.8/dist-packages/matplotlib/axes/_axes.py:2409, in Axes.bar(self, x, height, width, bottom, align, **kwargs)
   2407     elif orientation == 'horizontal':
   2408         r.sticky_edges.x.append(l)
-> 2409     self.add_patch(r)
   2410     patches.append(r)
   2412 if xerr is not None or yerr is not None:

File /usr/local/lib/python3.8/dist-packages/matplotlib/axes/_base.py:2358, in _AxesBase.add_patch(self, p)
   2356 if p.get_clip_path() is None:
   2357     p.set_clip_path(self.patch)
-> 2358 self._update_patch_limits(p)
   2359 self._children.append(p)
   2360 p._remove_method = self._children.remove

File /usr/local/lib/python3.8/dist-packages/matplotlib/axes/_base.py:2391, in _AxesBase._update_patch_limits(self, patch)
   2389     if updatey and patch_trf == self.get_xaxis_transform():
   2390         updatey = False
-> 2391 trf_to_data = patch_trf - self.transData
   2392 xys = trf_to_data.transform(vertices)
   2393 self.update_datalim(xys, updatex=updatex, updatey=updatey)

File /usr/local/lib/python3.8/dist-packages/matplotlib/transforms.py:1459, in Transform.__sub__(self, other)
   1457     return NotImplemented
   1458 for remainder, sub_tree in self._iter_break_from_left_to_right():
-> 1459     if sub_tree == other:
   1460         return remainder
   1461 for remainder, sub_tree in other._iter_break_from_left_to_right():

File /usr/local/lib/python3.8/dist-packages/matplotlib/transforms.py:2397, in CompositeGenericTransform.__eq__(self, other)
   2395 def __eq__(self, other):
   2396     if isinstance(other, (CompositeGenericTransform, CompositeAffine2D)):
-> 2397         return self is other or (self._a == other._a
   2398                                  and self._b == other._b)
   2399     else:
   2400         return False

File /usr/local/lib/python3.8/dist-packages/matplotlib/transforms.py:1793, in AffineBase.__eq__(self, other)
   1791 def __eq__(self, other):
   1792     if getattr(other, "is_affine", False) and hasattr(other, "get_matrix"):
-> 1793         return np.all(self.get_matrix() == other.get_matrix())
   1794     return NotImplemented

KeyboardInterrupt:
> /usr/local/lib/python3.8/dist-packages/matplotlib/transforms.py(1793)__eq__()
   1791     def __eq__(self, other):
   1792         if getattr(other, "is_affine", False) and hasattr(other, "get_matrix"):
-> 1793             return np.all(self.get_matrix() == other.get_matrix())
   1794         return NotImplemented
   1795

ipdb> q

In [123]: cf()

In [124]: f, ax = plt.subplots()

In [125]: ax.hist(ohki, bins=binedges)
^CException ignored in: <function TransformNode.set_children.<locals>.<lambda> at 0x7f1f56e97430>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/matplotlib/transforms.py", line 222, in <lambda>
    self, lambda _, pop=child._parents.pop, k=id(self): pop(k))
KeyboardInterrupt:
^C-----------------------------------------------------------------------
KeyboardInterrupt                     Traceback (most recent call last)
Input In [125], in <cell line: 1>()
----> 1 ax.hist(ohki, bins=binedges)

File /usr/local/lib/python3.8/dist-packages/matplotlib/__init__.py:1412, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)
   1409 @functools.wraps(func)
   1410 def inner(ax, *args, data=None, **kwargs):
   1411     if data is None:
-> 1412         return func(ax, *map(sanitize_sequence, args), **kwargs)
   1414     bound = new_sig.bind(ax, *args, **kwargs)
   1415     auto_label = (bound.arguments.get(label_namer)
   1416                   or bound.kwargs.get(label_namer))

File /usr/local/lib/python3.8/dist-packages/matplotlib/axes/_axes.py:6698, in Axes.hist(self, x, bins, range, density, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, **kwargs)
   6696 else:
   6697     height = m
-> 6698 bars = _barfunc(bins[:-1]+boffset, height, width,
   6699                 align='center', log=log,
   6700                 color=c, **{bottom_kwarg: bottom})
   6701 patches.append(bars)
   6702 if stacked:

File /usr/local/lib/python3.8/dist-packages/matplotlib/__init__.py:1412, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)
   1409 @functools.wraps(func)
   1410 def inner(ax, *args, data=None, **kwargs):
   1411     if data is None:
-> 1412         return func(ax, *map(sanitize_sequence, args), **kwargs)
   1414     bound = new_sig.bind(ax, *args, **kwargs)
   1415     auto_label = (bound.arguments.get(label_namer)
   1416                   or bound.kwargs.get(label_namer))

File /usr/local/lib/python3.8/dist-packages/matplotlib/axes/_axes.py:2409, in Axes.bar(self, x, height, width, bottom, align, **kwargs)
   2407     elif orientation == 'horizontal':
   2408         r.sticky_edges.x.append(l)
-> 2409     self.add_patch(r)
   2410     patches.append(r)
   2412 if xerr is not None or yerr is not None:

File /usr/local/lib/python3.8/dist-packages/matplotlib/axes/_base.py:2358, in _AxesBase.add_patch(self, p)
   2356 if p.get_clip_path() is None:
   2357     p.set_clip_path(self.patch)
-> 2358 self._update_patch_limits(p)
   2359 self._children.append(p)
   2360 p._remove_method = self._children.remove

File /usr/local/lib/python3.8/dist-packages/matplotlib/axes/_base.py:2377, in _AxesBase._update_patch_limits(self, patch)
   2375     return
   2376 p = patch.get_path()
-> 2377 vertices = p.vertices if p.codes is None else p.vertices[np.isin(
   2378     p.codes, (mpath.Path.CLOSEPOLY, mpath.Path.STOP), invert=True)]
   2379 if not vertices.size:
   2380     return

File <__array_function__ internals>:5, in isin(*args, **kwargs)

File /usr/local/lib/python3.8/dist-packages/numpy/lib/arraysetops.py:735, in isin(element, test_elements, assume_unique, invert)
    642 """
    643 Calculates `element in test_elements`, broadcasting over `element` only.
    644 Returns a boolean array of the same shape as `element` that is True
   (...)
    732        [ True, False]])
    733 """
    734 element = np.asarray(element)
--> 735 return in1d(element, test_elements, assume_unique=assume_unique,
    736             invert=invert).reshape(element.shape)

File <__array_function__ internals>:5, in in1d(*args, **kwargs)

File /usr/local/lib/python3.8/dist-packages/numpy/lib/arraysetops.py:603, in in1d(ar1, ar2, assume_unique, invert)
    601 if invert:
    602     mask = np.ones(len(ar1), dtype=bool)
--> 603     for a in ar2:
    604         mask &= (ar1 != a)
    605 else:

KeyboardInterrupt:
> /usr/local/lib/python3.8/dist-packages/numpy/lib/arraysetops.py(603)in1d()
    601         if invert:
    602             mask = np.ones(len(ar1), dtype=bool)
--> 603             for a in ar2:
    604                 mask &= (ar1 != a)
    605         else:

ipdb> q

In [126]: cf()

In [127]: f, ax = plt.subplots()

In [128]: ax.hist(ohki.ravel(), bins=binedges)
Out[128]:
(array([1.300e+01, 3.700e+01, 1.400e+02, 1.470e+02, 1.660e+02, 3.420e+02,
        3.080e+02, 6.280e+02, 7.920e+02, 1.606e+03, 1.186e+03, 2.071e+03,
        1.939e+03, 3.274e+03, 2.057e+03, 2.194e+03, 2.859e+03, 2.635e+03,
        2.709e+03, 2.414e+03, 2.316e+03, 1.948e+03, 1.932e+03, 2.083e+03,
        2.121e+03, 2.783e+03, 2.792e+03, 2.860e+03, 2.919e+03, 2.812e+03,
        2.795e+03, 2.848e+03, 2.605e+03, 2.762e+03, 2.479e+03, 2.411e+03,
        2.569e+03, 2.470e+03, 2.367e+03, 2.252e+03, 2.480e+03, 2.522e+03,
        2.428e+03, 2.552e+03, 2.609e+03, 2.567e+03, 2.470e+03, 2.312e+03,
        2.606e+03, 2.439e+03, 2.413e+03, 2.463e+03, 2.252e+03, 2.357e+03,
        2.426e+03, 2.245e+03, 2.385e+03, 2.279e+03, 2.236e+03, 2.322e+03,
        2.174e+03, 2.192e+03, 2.111e+03, 2.191e+03, 2.115e+03, 2.149e+03,
        2.258e+03, 2.128e+03, 2.141e+03, 2.193e+03, 2.161e+03, 2.310e+03,
        2.281e+03, 2.266e+03, 2.233e+03, 2.158e+03, 2.189e+03, 2.139e+03,
        2.136e+03, 2.101e+03, 2.114e+03, 2.066e+03, 2.001e+03, 1.935e+03,
        1.959e+03, 1.864e+03, 1.829e+03, 1.793e+03, 1.768e+03, 1.835e+03,
        1.670e+03, 1.776e+03, 1.716e+03, 1.680e+03, 1.685e+03, 1.629e+03,
        1.649e+03, 1.633e+03, 1.625e+03, 1.513e+03, 1.442e+03, 1.523e+03,
        1.437e+03, 1.426e+03, 1.438e+03, 1.360e+03, 1.254e+03, 1.307e+03,
        1.363e+03, 1.225e+03, 1.219e+03, 1.234e+03, 1.101e+03, 1.071e+03,
        1.120e+03, 1.030e+03, 9.530e+02, 1.015e+03, 9.610e+02, 9.270e+02,
        8.650e+02, 7.930e+02, 7.930e+02, 6.920e+02, 6.930e+02, 6.800e+02,
        5.780e+02, 6.090e+02, 5.490e+02, 5.260e+02, 5.140e+02, 4.960e+02,
        4.810e+02, 4.610e+02, 4.710e+02, 4.220e+02, 4.220e+02, 4.720e+02,
        4.190e+02, 3.630e+02, 3.340e+02, 3.150e+02, 3.050e+02, 3.240e+02,
        2.740e+02, 2.690e+02, 2.560e+02, 2.210e+02, 2.620e+02, 1.960e+02,
        2.000e+02, 1.920e+02, 2.120e+02, 1.710e+02, 2.050e+02, 2.050e+02,
        2.220e+02, 2.100e+02, 1.790e+02, 1.860e+02, 1.670e+02, 1.820e+02,
        1.470e+02, 1.600e+02, 1.260e+02, 1.600e+02, 1.470e+02, 1.260e+02,
        1.410e+02, 1.340e+02, 1.400e+02, 1.240e+02, 1.040e+02, 1.210e+02,
        1.030e+02, 1.080e+02, 9.500e+01, 9.300e+01, 1.140e+02, 8.400e+01,
        9.900e+01, 7.700e+01, 8.500e+01, 7.300e+01, 4.800e+01, 7.900e+01,
        6.800e+01, 5.700e+01, 7.300e+01, 5.500e+01, 7.700e+01, 6.300e+01,
        6.200e+01, 6.600e+01, 5.100e+01, 5.400e+01, 5.100e+01, 4.400e+01,
        4.600e+01, 4.100e+01, 4.300e+01, 5.300e+01, 4.100e+01, 5.900e+01,
        3.800e+01, 4.200e+01, 4.900e+01, 4.100e+01, 4.000e+01, 4.100e+01,
        3.500e+01, 5.000e+01, 4.900e+01, 4.000e+01, 4.600e+01, 4.800e+01,
        5.700e+01, 6.000e+01, 5.200e+01, 7.900e+01, 5.800e+01, 4.800e+01,
        3.600e+01, 6.000e+01, 3.600e+01, 5.000e+01, 4.600e+01, 3.900e+01,
        3.500e+01, 3.000e+01, 3.100e+01, 3.400e+01, 2.700e+01, 3.600e+01,
        2.000e+01, 1.100e+01, 1.100e+01, 5.000e+00, 0.000e+00, 5.000e+00,
        2.000e+00, 5.000e+00, 4.000e+00, 8.000e+00, 6.000e+00, 3.000e+00,
        7.000e+00, 4.000e+00, 1.000e+01, 1.000e+01, 1.000e+01, 2.200e+01,
        1.700e+01, 1.600e+01, 2.600e+01, 3.000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <BarContainer object of 256 artists>)

In [129]: ohki.dtype
Out[129]: dtype('uint8')

In [130]: ohki + 100
Out[130]:
array([[101, 103, 106, ..., 106, 104, 102],
       [101, 103, 106, ..., 106, 104, 102],
       [101, 103, 106, ..., 106, 104, 102],
       ...,
       [101, 103, 105, ..., 107, 104, 102],
       [101, 103, 105, ..., 105, 102, 101],
       [101, 103, 105, ..., 103, 100, 100]], dtype=uint8)

In [131]: (ohki + 100).max()
Out[131]: 255

In [132]: np.float64(ohki) + 100
Out[132]:
array([[101., 103., 106., ..., 106., 104., 102.],
       [101., 103., 106., ..., 106., 104., 102.],
       [101., 103., 106., ..., 106., 104., 102.],
       ...,
       [101., 103., 105., ..., 107., 104., 102.],
       [101., 103., 105., ..., 105., 102., 101.],
       [101., 103., 105., ..., 103., 100., 100.]])

In [133]: (np.float64(ohki) + 100).max()
Out[133]: 355.0

In [134]: ohki2 = np.float64(ohki) + 50

In [135]: f2, ax2 = plt.subplots()

In [136]: ax2.imshow(ohki2)
Out[136]: <matplotlib.image.AxesImage at 0x7f1f55e6c910>

In [137]: ax2.imshow(ohki2, cmap='gray')
Out[137]: <matplotlib.image.AxesImage at 0x7f1f55e6edc0>

In [138]: f, ax = plt.subplots()

In [139]: ax.imshow(ohki, cmap='gray')
Out[139]: <matplotlib.image.AxesImage at 0x7f1f55efe940>

In [140]: f2, ax2 = plt.subplots()

In [141]: ax2.imshow(ohki2, cmap='gray', vmin=0, vmax=255)
Out[141]: <matplotlib.image.AxesImage at 0x7f1f55bccac0>

In [142]: from skimage import exposure

In [143]: exposure.rescale_intensity?

In [144]: ohki3 = exposure.rescale_intensity(ohki, (0, 150))

In [145]: ohki3.min()
Out[145]: 0

In [146]: ohki3.max()
Out[146]: 255

In [147]: f, ax = plt.subplots(ohki3, vmin=0, vmax=255)
^C
KeyboardInterrupt


In [148]: f, ax = plt.subplots()

In [149]: ax.imshow(ohki3, vmin=0, vmax=255)
Out[149]: <matplotlib.image.AxesImage at 0x7f1f569f41c0>

In [150]: ax.imshow(ohki3, vmin=0, vmax=255, cmap='gray')
Out[150]: <matplotlib.image.AxesImage at 0x7f1f556f4580>

In [151]: ohki.shape
Out[151]: (512, 491)

In [152]: 512/3
Out[152]: 170.66666666666666

In [153]: ohki[170:340]
Out[153]:
array([[  9,  17,  25, ...,  92,  84,  58],
       [  9,  17,  25, ..., 109,  98,  71],
       [  9,  17,  25, ..., 122, 111,  82],
       ...,
       [ 16,  31,  48, ...,  14,  12,  12],
       [ 14,  28,  44, ...,  13,  11,  11],
       [ 12,  25,  40, ...,  13,  11,  11]], dtype=uint8)

In [154]: 491/3
Out[154]: 163.66666666666666

In [155]: 163*2
Out[155]: 326

In [156]: ohki[170:340, 163:326]
Out[156]:
array([[101, 101,  99, ..., 160, 161, 159],
       [102, 102, 101, ..., 160, 161, 159],
       [101, 101, 102, ..., 159, 159, 157],
       ...,
       [212, 216, 219, ...,  97, 105, 114],
       [217, 219, 220, ..., 106, 112, 118],
       [220, 220, 219, ..., 117, 122, 125]], dtype=uint8)

In [157]: ohki[170:340, 163:326].shape
Out[157]: (170, 163)

In [158]: mid = ohki[170:340, 163:326]

In [159]: subset = ohki[170:340, 163:326]

In [160]: f, ax = plt.subplots()

In [161]: ax.imshow(subset, vmin=0, vmax=255, cmap='gray')
Out[161]: <matplotlib.image.AxesImage at 0x7f1f75265e50>

In [162]: f, ax = plt.subplots()

In [163]: ax.hist(subset.ravel(), bins=binedges)
Out[163]:
(array([  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   7.,   4.,   9.,  10.,  12.,
          9.,   4.,   2.,  10.,   6.,   3.,   6.,   4.,   4.,   3.,   6.,
          5.,   6.,   5.,   4.,   7.,  11.,  16.,  24.,  20.,  15.,  24.,
         19.,  26.,  44.,  48.,  58.,  47.,  46.,  70., 103.,  91., 109.,
        120., 136., 214., 199., 199., 262., 269., 258., 314., 319., 343.,
        276., 322., 296., 321., 352., 365., 365., 376., 429., 418., 430.,
        474., 496., 447., 435., 396., 409., 379., 407., 393., 414., 391.,
        380., 338., 402., 355., 412., 362., 376., 374., 378., 401., 417.,
        398., 472., 406., 406., 483., 437., 418., 419., 400., 351., 352.,
        287., 285., 237., 231., 219., 188., 203., 167., 162., 143., 151.,
        129., 111., 116., 105.,  99., 107.,  98., 102.,  82.,  83.,  85.,
         98.,  91.,  71.,  74.,  65.,  80.,  70.,  73.,  63.,  66.,  59.,
         68.,  75.,  73.,  72.,  49.,  65.,  52.,  61.,  40.,  45.,  36.,
         47.,  38.,  43.,  38.,  38.,  45.,  41.,  25.,  38.,  36.,  28.,
         29.,  32.,  51.,  29.,  37.,  29.,  27.,  22.,  17.,  23.,  24.,
         13.,  34.,  25.,  30.,  21.,  23.,  30.,  17.,  16.,  30.,  21.,
         26.,  26.,  19.,  21.,  19.,  26.,  18.,  29.,  20.,  17.,  14.,
         17.,  17.,  25.,  27.,  14.,  21.,  31.,  17.,  25.,  24.,  32.,
         27.,  33.,  20.,  33.,  21.,  21.,  26.,  24.,  18.,  19.,  25.,
         28.,  21.,  27.,  17.,   8.,   6.,   4.,   0.,   3.,   2.,   5.,
          4.,   8.,   6.,   3.,   7.,   4.,  10.,  10.,  10.,  22.,  17.,
         16.,  26.,   3.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <BarContainer object of 256 artists>)

In [164]: plt.close('all')

In [165]: ls
08_history.txt  08_images.pdf   face_gray.png  movie.avi
08_images.md    face_alpha.png  face.png       ohki2005.png

In [166]: facec = io.imread('face.png')

In [167]: facec.shape
Out[167]: (782, 782, 3)

In [168]: f, ax = plt.subplots()

In [169]: ax.imshow(facec)
Out[169]: <matplotlib.image.AxesImage at 0x7f1f6ed20460>

In [170]: facec
Out[170]:
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)

In [171]: from skimage import data

In [172]: immun = data.immunohistochemistry()

In [173]: immun.shape
Out[173]: (512, 512, 3)

In [174]: ax.imshow(immun)
Out[174]: <matplotlib.image.AxesImage at 0x7f1f740223a0>

In [175]: immun
Out[175]:
array([[[156, 118,  81],
        [163, 125,  88],
        [156, 116,  81],
        ...,
        [152, 160, 196],
        [169, 175, 207],
        [189, 196, 225]],

       [[141, 105,  69],
        [144, 108,  72],
        [141, 102,  69],
        ...,
        [164, 172, 208],
        [167, 173, 205],
        [175, 182, 210]],

       [[125,  92,  59],
        [132,  99,  66],
        [138, 103,  71],
        ...,
        [172, 181, 214],
        [164, 171, 200],
        [164, 171, 197]],

       ...,

       [[221, 218, 209],
        [226, 223, 214],
        [234, 231, 222],
        ...,
        [212, 211, 207],
        [214, 210, 207],
        [217, 213, 210]],

       [[217, 214, 207],
        [222, 219, 212],
        [230, 227, 220],
        ...,
        [214, 213, 211],
        [211, 207, 204],
        [215, 210, 207]],

       [[222, 219, 212],
        [222, 219, 212],
        [224, 221, 214],
        ...,
        [210, 209, 207],
        [210, 205, 202],
        [215, 210, 207]]], dtype=uint8)

In [176]: immun.shape
Out[176]: (512, 512, 3)

In [177]: immun[0, 0]
Out[177]: array([156, 118,  81], dtype=uint8)

In [178]: immun[:, :, 0]
Out[178]:
array([[156, 163, 156, ..., 152, 169, 189],
       [141, 144, 141, ..., 164, 167, 175],
       [125, 132, 138, ..., 172, 164, 164],
       ...,
       [221, 226, 234, ..., 212, 214, 217],
       [217, 222, 230, ..., 214, 211, 215],
       [222, 222, 224, ..., 210, 210, 215]], dtype=uint8)

In [179]: immun[:, :, 0] = 0

In [180]: immun[:, :, 0]
Out[180]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [181]: ax.imshow(immun)
Out[181]: <matplotlib.image.AxesImage at 0x7f1f55bbfb20>

In [182]: immun = data.immunohistochemistry()

In [183]: ax.imshow(immun)
Out[183]: <matplotlib.image.AxesImage at 0x7f1f65e66820>

In [184]: immun[:100, :100, 0] = 0

In [185]: ax.imshow(immun)
Out[185]: <matplotlib.image.AxesImage at 0x7f1f65d79c40>

In [186]: immun[::10, ::10, 0] = 0

In [187]: ax.imshow(immun)
Out[187]: <matplotlib.image.AxesImage at 0x7f1f65d47640>

In [188]: immun = data.immunohistochemistry()

In [189]: immun[:, :, 0] = 0

In [190]: ax.imshow(immun)
Out[190]: <matplotlib.image.AxesImage at 0x7f1f65e6cf10>

In [191]: immun[:, :, 1] = 0

In [192]: ax.imshow(immun)
Out[192]: <matplotlib.image.AxesImage at 0x7f1f65e6cdc0>

In [193]: immun[:, :, 2]
Out[193]:
array([[ 81,  88,  81, ..., 196, 207, 225],
       [ 69,  72,  69, ..., 208, 205, 210],
       [ 59,  66,  71, ..., 214, 200, 197],
       ...,
       [209, 214, 222, ..., 207, 207, 210],
       [207, 212, 220, ..., 211, 204, 207],
       [212, 212, 214, ..., 207, 202, 207]], dtype=uint8)

In [194]: immun = data.immunohistochemistry()

In [195]: immun.shape
Out[195]: (512, 512, 3)

In [196]: from skimage import color

In [197]: color.rgb2gray?

In [198]: immung = color.rgb2gray(immun)

In [199]: immung.shape
Out[199]: (512, 512)

In [200]: f, ax = plt.subplots()

In [201]: ax.imshow(immun, cmap='gray')
Out[201]: <matplotlib.image.AxesImage at 0x7f1f65f7adf0>

In [202]: ax.imshow(immung, cmap='gray')
Out[202]: <matplotlib.image.AxesImage at 0x7f1f65e669a0>

In [203]: ls
08_history.txt  08_images.pdf   face_gray.png  movie.avi
08_images.md    face_alpha.png  face.png       ohki2005.png

In [204]: facea = io.imread('face_alpha.png')

In [205]: facea.shape
Out[205]: (782, 782, 4)

In [206]: alpha = facea[:, :, 3]

In [207]: alpha
Out[207]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [208]: f, ax = plt.subplots()

In [209]: ax.imshow(alpha, cmap='gray')
Out[209]: <matplotlib.image.AxesImage at 0x7f1f66134700>

In [210]: filters
Out[210]: <module 'skimage.filters' from '/usr/local/lib/python3.8/dist-packages/skimage/filters/__init__.py'>

In [211]: ohki = io.imread('ohki2005.png')
     ...: f, ax = plt.subplots()
     ...: ax.imshow(ohki, cmap='gray')
     ...: f2, ax2 = plt.subplots()
     ...: ax2.hist(ohki.ravel(), bins=np.arange(256))
     ...: edges = filters.sobel(ohki)
     ...: f3, ax3 = plt.subplots()
     ...: ax3.imshow(edges, cmap='gray')
Out[211]: <matplotlib.image.AxesImage at 0x7f1f661e6160>

In [212]: from skimage.feature import canny
     ...: edges = canny(ohki, sigma=1.5)
     ...: from scipy import ndimage
     ...: mask = ndimage.binary_fill_holes(edges)
     ...: f4, ax4 = plt.subplots()
     ...: ax4.imshow(mask, cmap='gray')
Out[212]: <matplotlib.image.AxesImage at 0x7f1f677a6ca0>

In [213]: import skvideo

In [214]: import skvideo.io

In [215]: mvi = skvideo.io('movie.avi')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Input In [215], in <cell line: 1>()
----> 1 mvi = skvideo.io('movie.avi')

TypeError: 'module' object is not callable
> <ipython-input-215-8059f4fff852>(1)<cell line: 1>()
----> 1 mvi = skvideo.io('movie.avi')

ipdb> c

In [216]: mvi = skvideo.io.vread('movie.avi')

In [217]: miv.shape
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Input In [217], in <cell line: 1>()
----> 1 miv.shape

NameError: name 'miv' is not defined
> <ipython-input-217-9d95b15523d7>(1)<cell line: 1>()
----> 1 miv.shape

ipdb> c

In [218]: mvi.shape
Out[218]: (300, 240, 320, 3)

In [219]: mvi[0]
Out[219]:
array([[[148, 148, 148],
        [151, 151, 151],
        [155, 155, 155],
        ...,
        [ 90,  90,  90],
        [ 92,  92,  92],
        [ 78,  78,  78]],

       [[151, 151, 151],
        [154, 154, 154],
        [157, 157, 157],
        ...,
        [111, 111, 111],
        [ 92,  92,  92],
        [ 64,  64,  64]],

       [[135, 135, 135],
        [137, 137, 137],
        [140, 140, 140],
        ...,
        [ 85,  85,  85],
        [ 71,  71,  71],
        [ 49,  49,  49]],

       ...,

       [[ 69,  69,  69],
        [ 80,  80,  80],
        [107, 107, 107],
        ...,
        [ 92,  92,  92],
        [106, 106, 106],
        [103, 103, 103]],

       [[ 85,  85,  85],
        [118, 118, 118],
        [154, 154, 154],
        ...,
        [ 73,  73,  73],
        [ 91,  91,  91],
        [ 93,  93,  93]],

       [[150, 150, 150],
        [159, 159, 159],
        [158, 158, 158],
        ...,
        [ 57,  57,  57],
        [ 62,  62,  62],
        [ 56,  56,  56]]], dtype=uint8)

In [220]: mvi[0].shape
Out[220]: (240, 320, 3)

In [221]: f, ax = plt.subplots()

In [222]: ax.imshow(mvi[0])
Out[222]: <matplotlib.image.AxesImage at 0x7f1f6669e700>

In [223]: ax.imshow(mvi[100])
Out[223]: <matplotlib.image.AxesImage at 0x7f1f6669e310>

In [224]: ax.imshow(mvi[200])
Out[224]: <matplotlib.image.AxesImage at 0x7f1f668928b0>

In [225]: skvideo
Out[225]: <module 'skvideo' from '/usr/local/lib/python3.8/dist-packages/skvideo/__init__.py'>

In [226]:
