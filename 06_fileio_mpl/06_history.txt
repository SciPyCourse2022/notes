
mspacek@Godel:~/SciPyCourse2022/notes/06_fileio_mpl$ ipython
Python 3.8.10 (default, Mar 15 2022, 12:22:08)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.1.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: x1 = [ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  4.75528258e+0
   ...: 0,
   ...:        2.93892626e+00,  6.12323400e-16, -2.93892626e+00, -4.75528258e+0
   ...: 0,
   ...:       -4.75528258e+00, -2.93892626e+00, -1.22464680e-15,  2.93892626e+0
   ...: 0,
   ...:                np.nan,  4.75528258e+00,  2.93892626e+00,  1.83697020e-1
   ...: 5,
   ...:       -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,          np.na
   ...: n]
   ...:
   ...: x2 = [ 0,  2,  3, -1,  6,  7,  8,  9, 10, 10, 10, 10, -1,  9,  8,  7,
   ...: 6,  5,  3,  2]
   ...:
   ...: t = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
   ...:      1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9] # seconds

In [2]: x1
Out[2]:
[0.0,
 2.93892626,
 4.75528258,
 4.75528258,
 2.93892626,
 6.123234e-16,
 -2.93892626,
 -4.75528258,
 -4.75528258,
 -2.93892626,
 -1.2246468e-15,
 2.93892626,
 nan,
 4.75528258,
 2.93892626,
 1.8369702e-15,
 -2.93892626,
 -4.75528258,
 -4.75528258,
 nan]

In [3]: x2
Out[3]: [0, 2, 3, -1, 6, 7, 8, 9, 10, 10, 10, 10, -1, 9, 8, 7, 6, 5, 3, 2]

In [4]: t
Out[4]:
[0.0,
 0.1,
 0.2,
 0.3,
 0.4,
 0.5,
 0.6,
 0.7,
 0.8,
 0.9,
 1.0,
 1.1,
 1.2,
 1.3,
 1.4,
 1.5,
 1.6,
 1.7,
 1.8,
 1.9]

In [5]: type(x1)
Out[5]: list

In [6]: len(t)
Out[6]: 20

In [7]: len(x1)
Out[7]: 20

In [8]: len(x2)
Out[8]: 20

In [9]: len(x1) == len(x2)
Out[9]: True

In [10]: len(x1) == len(x2) == len(t)
Out[10]: True

In [11]: len(x1) == len(x2) == 19
Out[11]: False

In [12]: y = []

In [13]: for xx, yy in zip(x1, x2):
    ...:     y.append(xx * yy)
    ...:

In [14]: y
Out[14]:
[0.0,
 5.87785252,
 14.265847740000002,
 -4.75528258,
 17.63355756,
 4.2862638000000005e-15,
 -23.51141008,
 -42.79754322,
 -47.5528258,
 -29.389262600000002,
 -1.2246468e-14,
 29.389262600000002,
 nan,
 42.79754322,
 23.51141008,
 1.28587914e-14,
 -17.63355756,
 -23.7764129,
 -14.265847740000002,
 nan]

In [15]: y = np.array(y)

In [16]: y
Out[16]:
array([ 0.00000000e+00,  5.87785252e+00,  1.42658477e+01, -4.75528258e+00,
        1.76335576e+01,  4.28626380e-15, -2.35114101e+01, -4.27975432e+01,
       -4.75528258e+01, -2.93892626e+01, -1.22464680e-14,  2.93892626e+01,
                   nan,  4.27975432e+01,  2.35114101e+01,  1.28587914e-14,
       -1.76335576e+01, -2.37764129e+01, -1.42658477e+01,             nan])

In [17]: y.dtype
Out[17]: dtype('float64')

In [18]: x1 = np.array(x1)

In [19]: x2 = np.array(x2)

In [20]: t = np.array(t)

In [21]: x1
Out[21]:
array([ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  4.75528258e+00,
        2.93892626e+00,  6.12323400e-16, -2.93892626e+00, -4.75528258e+00,
       -4.75528258e+00, -2.93892626e+00, -1.22464680e-15,  2.93892626e+00,
                   nan,  4.75528258e+00,  2.93892626e+00,  1.83697020e-15,
       -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,             nan])

In [22]: y = x1 * x2

In [23]: y
Out[23]:
array([ 0.00000000e+00,  5.87785252e+00,  1.42658477e+01, -4.75528258e+00,
        1.76335576e+01,  4.28626380e-15, -2.35114101e+01, -4.27975432e+01,
       -4.75528258e+01, -2.93892626e+01, -1.22464680e-14,  2.93892626e+01,
                   nan,  4.27975432e+01,  2.35114101e+01,  1.28587914e-14,
       -1.76335576e+01, -2.37764129e+01, -1.42658477e+01,             nan])

In [24]: x1.dtype
Out[24]: dtype('float64')

In [25]: x2.dtype
Out[25]: dtype('int64')

In [26]: y.dtype
Out[26]: dtype('float64')

In [27]: x1.shape
Out[27]: (20,)

In [28]: 8 * 20
Out[28]: 160

In [29]: t.dtype
Out[29]: dtype('float64')

In [30]: x1.nbytes
Out[30]: 160

In [31]: x2.nbytes
Out[31]: 160

In [32]: t.nbytes
Out[32]: 160

In [33]: y.nbytes
Out[33]: 160

In [34]: x1
Out[34]:
array([ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  4.75528258e+00,
        2.93892626e+00,  6.12323400e-16, -2.93892626e+00, -4.75528258e+00,
       -4.75528258e+00, -2.93892626e+00, -1.22464680e-15,  2.93892626e+00,
                   nan,  4.75528258e+00,  2.93892626e+00,  1.83697020e-15,
       -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,             nan])

In [35]: x1 == np.nan
Out[35]:
array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False])

In [36]: np.isnan(x1)
Out[36]:
array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False,  True])

In [37]: np.isnan(x1)
Out[37]:
array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False,  True])

In [38]: ~np.isnan(x1)
Out[38]:
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False])

In [39]: x2 == -1
Out[39]:
array([False, False, False,  True, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False])

In [40]: x2
Out[40]:
array([ 0,  2,  3, -1,  6,  7,  8,  9, 10, 10, 10, 10, -1,  9,  8,  7,  6,
        5,  3,  2])

In [41]: x2 == -1
Out[41]:
array([False, False, False,  True, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False])

In [42]: x2 != -1
Out[42]:
array([ True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True])

In [43]: ~np.isnan(x1) & x2 == -1
Out[43]:
array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False])

In [44]: ~np.isnan(x1) & x2 != -1
Out[44]:
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])

In [45]: ~np.isnan(x1) & (x2 != -1)
Out[45]:
array([ True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False])

In [46]: keepis = ~np.isnan(x1) & (x2 != -1)

In [47]: len(keepis)
Out[47]: 20

In [48]: x1[keepis]
Out[48]:
array([ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  2.93892626e+00,
        6.12323400e-16, -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,
       -2.93892626e+00, -1.22464680e-15,  2.93892626e+00,  4.75528258e+00,
        2.93892626e+00,  1.83697020e-15, -2.93892626e+00, -4.75528258e+00,
       -4.75528258e+00])

In [49]: x2[keepis]
Out[49]: array([ 0,  2,  3,  6,  7,  8,  9, 10, 10, 10, 10,  9,  8,  7,  6,  5,  3])

In [50]: t[keepis]
Out[50]:
array([0. , 0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.3, 1.4,
       1.5, 1.6, 1.7, 1.8])

In [51]: t[keepis].shape
Out[51]: (17,)

In [52]: x2[keepis].shape
Out[52]: (17,)

In [53]: x1[keepis].shape
Out[53]: (17,)

In [54]: keepis = ~np.isnan(x1) & (x2 != -1)

In [55]: ~np.isnan(x1)
Out[55]:
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False])

In [56]: ~np.isnan(x1).shape
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Input In [56], in <cell line: 1>()
----> 1 ~np.isnan(x1).shape

TypeError: bad operand type for unary ~: 'tuple'
> <ipython-input-56-59fc75c7e1ca>(1)<cell line: 1>()
----> 1 ~np.isnan(x1).shape

ipdb> c

In [57]: (~np.isnan(x1)).shape
Out[57]: (20,)

In [58]: ~np.isnan(x1) & (x2 != -1)
Out[58]:
array([ True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False])

In [59]: keepis = ~np.isnan(x1) & (x2 != -1)

In [60]: keepis.sum()
Out[60]: 17

In [61]: x1[keepis]
Out[61]:
array([ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  2.93892626e+00,
        6.12323400e-16, -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,
       -2.93892626e+00, -1.22464680e-15,  2.93892626e+00,  4.75528258e+00,
        2.93892626e+00,  1.83697020e-15, -2.93892626e+00, -4.75528258e+00,
       -4.75528258e+00])

In [62]: x1[keepis].shape
Out[62]: (17,)

In [63]: x1 = x1[keepis]

In [64]: x2 = x2[keepis]

In [65]: t = t[keepis]

In [66]: x1
Out[66]:
array([ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  2.93892626e+00,
        6.12323400e-16, -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,
       -2.93892626e+00, -1.22464680e-15,  2.93892626e+00,  4.75528258e+00,
        2.93892626e+00,  1.83697020e-15, -2.93892626e+00, -4.75528258e+00,
       -4.75528258e+00])

In [67]: x2
Out[67]: array([ 0,  2,  3,  6,  7,  8,  9, 10, 10, 10, 10,  9,  8,  7,  6,  5,  3])

In [68]: t
Out[68]:
array([0. , 0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.3, 1.4,
       1.5, 1.6, 1.7, 1.8])

In [69]: y = x1 * x2

In [70]: y
Out[70]:
array([ 0.00000000e+00,  5.87785252e+00,  1.42658477e+01,  1.76335576e+01,
        4.28626380e-15, -2.35114101e+01, -4.27975432e+01, -4.75528258e+01,
       -2.93892626e+01, -1.22464680e-14,  2.93892626e+01,  4.27975432e+01,
        2.35114101e+01,  1.28587914e-14, -1.76335576e+01, -2.37764129e+01,
       -1.42658477e+01])

In [71]: t
Out[71]:
array([0. , 0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.3, 1.4,
       1.5, 1.6, 1.7, 1.8])

In [72]: len(y)
Out[72]: 17

In [73]: len(t)
Out[73]: 17

In [74]: x2
Out[74]: array([ 0,  2,  3,  6,  7,  8,  9, 10, 10, 10, 10,  9,  8,  7,  6,  5,  3])

In [75]: max(x2)
Out[75]: 10

In [76]: x2.argmax()
Out[76]: 7

In [77]: x2[7]
Out[77]: 10

In [78]: i = 7

In [79]: x1[i]
Out[79]: -4.75528258

In [80]: t[i]
Out[80]: 0.8

In [81]: x2 == x2.argmax()
Out[81]:
array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False,  True, False, False, False])

In [82]: x2.argmax()
Out[82]: 7

In [83]: x2.max()
Out[83]: 10

In [84]: x2
Out[84]: array([ 0,  2,  3,  6,  7,  8,  9, 10, 10, 10, 10,  9,  8,  7,  6,  5,  3])

In [85]: x2.argmax()
Out[85]: 7

In [86]: x2[x2.argmax()]
Out[86]: 10

In [87]: x2.max()
Out[87]: 10

In [88]: x2 == x2[x2.argmax()]
Out[88]:
array([False, False, False, False, False, False, False,  True,  True,
        True,  True, False, False, False, False, False, False])

In [89]: i = x2.argmax()

In [90]: x2 == x2[i]
Out[90]:
array([False, False, False, False, False, False, False,  True,  True,
        True,  True, False, False, False, False, False, False])

In [91]: (x2 == x2[i]).sum()
Out[91]: 4

In [92]: np.where(x2 == x2[i])
Out[92]: (array([ 7,  8,  9, 10]),)

In [93]: np.where(x2 == x2[i])[0]
Out[93]: array([ 7,  8,  9, 10])

In [94]: len(np.where(x2 == x2[i])[0])
Out[94]: 4

In [95]: np.where(x2 == x2[i])[0]
Out[95]: array([ 7,  8,  9, 10])

In [96]: x2[np.where(x2 == x2[i])[0]]
Out[96]: array([10, 10, 10, 10])

In [97]: np.where(x2 == 10)[0]
Out[97]: array([ 7,  8,  9, 10])

In [98]: len(np.where(x2 == 10)[0])
Out[98]: 4

In [99]: np.delete?

In [100]: x2 == 10
Out[100]:
array([False, False, False, False, False, False, False,  True,  True,
        True,  True, False, False, False, False, False, False])

In [101]: np.where(x2 == 10)
Out[101]: (array([ 7,  8,  9, 10]),)

In [102]: np.where(x2 == 10)[0]
Out[102]: array([ 7,  8,  9, 10])

In [103]: x1 = [ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  4.75528258e
     ...: +00,
     ...:        2.93892626e+00,  6.12323400e-16, -2.93892626e+00, -4.75528258e
     ...: +00,
     ...:       -4.75528258e+00, -2.93892626e+00, -1.22464680e-15,  2.93892626e
     ...: +00,
     ...:                np.nan,  4.75528258e+00,  2.93892626e+00,  1.83697020e
     ...: -15,
     ...:       -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,          np.
     ...: nan]
     ...:
     ...: x2 = [ 0,  2,  3, -1,  6,  7,  8,  9, 10, 10, 10, 10, -1,  9,  8,  7,
     ...:   6,  5,  3,  2]
     ...:
     ...: t = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
     ...:      1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9] # seconds

In [104]: np.where(x2 == -1)
Out[104]: (array([], dtype=int64),)

In [105]: x2 = np.array(x2)

In [106]: x1 = np.array(x1)

In [107]: np.where(x2 == -1)
Out[107]: (array([ 3, 12]),)

In [108]: np.where(x2 == -1)[0]
Out[108]: array([ 3, 12])

In [109]: np.concatenate([np.where(np.isnan(x1)), np.where(x2 == -1)])
Out[109]:
array([[12, 19],
       [ 3, 12]])

In [110]: ii = np.concatenate([np.where(np.isnan(x1)), np.where(x2 == -1)])

In [111]: i
Out[111]: 7

In [112]: ii
Out[112]:
array([[12, 19],
       [ 3, 12]])

In [113]: np.unique(ii)
Out[113]: array([ 3, 12, 19])

In [114]: np.delete(x2, np.unique(ii))
Out[114]: array([ 0,  2,  3,  6,  7,  8,  9, 10, 10, 10, 10,  9,  8,  7,  6,  5,  3])

In [115]: np.delete(x2, np.unique(ii)).shape
Out[115]: (17,)

In [116]: 16*16
Out[116]: 256

In [117]: np.loadtxt?

In [118]: ls
06_fileio_mpl.md   anatomy.pdf                 plot_exercise.py      t.npy
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  sin_and_cos_vs_t.png  V.npy
06_history.txt     distribution.png            test1D.csv            Vt.mat
100.txt            matplotlibrc                test2D.csv

In [119]: np.loadtxt('test1D.csv')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Input In [119], in <cell line: 1>()
----> 1 np.loadtxt('test1D.csv')

File /usr/local/lib/python3.8/dist-packages/numpy/lib/npyio.py:1148, in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows, like)
   1143 # read data in chunks and fill it into an array via resize
   1144 # over-allocating and shrinking the array later may be faster but is
   1145 # probably not relevant compared to the cost of actually reading and
   1146 # converting the data
   1147 X = None
-> 1148 for x in read_data(_loadtxt_chunksize):
   1149     if X is None:
   1150         X = np.array(x, dtype)

File /usr/local/lib/python3.8/dist-packages/numpy/lib/npyio.py:999, in loadtxt.<locals>.read_data(chunk_size)
    995     raise ValueError("Wrong number of columns at line %d"
    996                      % line_num)
    998 # Convert each value according to its column and store
--> 999 items = [conv(val) for (conv, val) in zip(converters, vals)]
   1001 # Then pack it according to the dtype's nesting
   1002 items = pack_items(items, packing)

File /usr/local/lib/python3.8/dist-packages/numpy/lib/npyio.py:999, in <listcomp>(.0)
    995     raise ValueError("Wrong number of columns at line %d"
    996                      % line_num)
    998 # Convert each value according to its column and store
--> 999 items = [conv(val) for (conv, val) in zip(converters, vals)]
   1001 # Then pack it according to the dtype's nesting
   1002 items = pack_items(items, packing)

File /usr/local/lib/python3.8/dist-packages/numpy/lib/npyio.py:736, in _getconv.<locals>.floatconv(x)
    734 if '0x' in x:
    735     return float.fromhex(x)
--> 736 return float(x)

ValueError: could not convert string to float: '0,1,2,3,4,5,6,7,8,9'
> /usr/local/lib/python3.8/dist-packages/numpy/lib/npyio.py(736)floatconv()
    734         if '0x' in x:
    735             return float.fromhex(x)
--> 736         return float(x)
    737
    738     typ = dtype.type

ipdb> c

In [120]: np.loadtxt('test1D.csv', delimeter=',')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Input In [120], in <cell line: 1>()
----> 1 np.loadtxt('test1D.csv', delimeter=',')

TypeError: loadtxt() got an unexpected keyword argument 'delimeter'
> <ipython-input-120-b6b9645ca057>(1)<cell line: 1>()
----> 1 np.loadtxt('test1D.csv', delimeter=',')

ipdb> c

In [121]: np.loadtxt('test1D.csv', delimiter=',')
Out[121]: array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])

In [122]: np.loadtxt('test1D.csv', delimiter=',', dtype=int)
Out[122]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [123]: test2D = np.loadtxt('test2D.csv', delimiter=',', dtype=int)

In [124]: test2D
Out[124]:
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

In [125]: np.savetxt?

In [126]: test1D
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Input In [126], in <cell line: 1>()
----> 1 test1D

NameError: name 'test1D' is not defined
> <ipython-input-126-05afa9164880>(1)<cell line: 1>()
----> 1 test1D

ipdb> c

In [127]: test1D = np.loadtxt('test1D.csv', delimiter=',', dtype=int)

In [128]: test1D
Out[128]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [129]: np.savetxt('test1D_out.txt', test1D)

In [130]: np.savetxt('test1D_out.txt', (test1D,), fmt='%d')

In [131]: np.savetxt('test1D_out.txt', (test1D,), fmt='%d', delimiter=',')

In [132]: V = np.load('V.npy')

In [133]: V
Out[133]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [134]: V.dtype
Out[134]: dtype('float64')

In [135]: V.shape
Out[135]: (100,)

In [136]: t = np.load('t.npy')

In [137]: t.dtype
Out[137]: dtype('int64')

In [138]: t
Out[138]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [139]: np.save('newV.npy', V)

In [140]: np.load('V.npy')
Out[140]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [141]: np.save('newV.npy', V)

In [142]: np.load('newV.npy')
Out[142]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [143]: np.save('newV.npy', V)

In [144]: np.savez('Vt.npz', V=V, t=t)

In [145]: d = np.load('Vt.npz')

In [146]: d
Out[146]: <numpy.lib.npyio.NpzFile at 0x7f16198acb50>

In [147]: list(d)
Out[147]: ['V', 't']

In [148]: d['V']
Out[148]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [149]: t['V']
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Input In [149], in <cell line: 1>()
----> 1 t['V']

IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices
> <ipython-input-149-a0bb1ecd141a>(1)<cell line: 1>()
----> 1 t['V']

ipdb> c

In [150]: d['t']
Out[150]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [151]: a = np.arange(10)

In [152]: np.savetxt('exercise.txt', a)

In [153]: pwd
Out[153]: '/home/mspacek/SciPyCourse2022/notes/06_fileio_mpl'

In [154]: ls
06_fileio_mpl.md   ASCII-Conversion-Chart.pdf  plot_exercise.py      t.npy
06_fileio_mpl.pdf  distribution.png            sin_and_cos_vs_t.png  V.npy
06_history.txt     exercise.txt                test1D.csv            Vt.npz
100.txt            matplotlibrc                test1D_out.txt
anatomy.pdf        newV.npy                    test2D.csv

In [155]: np.savetxt('exercise.txt', a, fmt='%g')

In [156]: np.loadtxt?

In [157]: np.loadtxt('exercise.txt')
Out[157]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8., 99.])

In [158]: np.loadtxt('exercise.txt', dtype=int)
Out[158]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 99])

In [159]: np.int64(np.loadtxt('exercise.txt'))
Out[159]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 99])

In [160]: np.save?

In [161]: np.save('exercise.npy', a)

In [162]: c = np.load('exercise.npy')

In [163]: c
Out[163]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [164]: a
Out[164]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [165]: import matplotlib.pyplot as plt

In [166]: t = np.linspace(0, 4*np.pi, 100)

In [167]: t
Out[167]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [168]: s = np.sint(t)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Input In [168], in <cell line: 1>()
----> 1 s = np.sint(t)

File /usr/local/lib/python3.8/dist-packages/numpy/__init__.py:313, in __getattr__(attr)
    310     from .testing import Tester
    311     return Tester
--> 313 raise AttributeError("module {!r} has no attribute "
    314                      "{!r}".format(__name__, attr))

AttributeError: module 'numpy' has no attribute 'sint'
> /usr/local/lib/python3.8/dist-packages/numpy/__init__.py(313)__getattr__()
    311                 return Tester
    312
--> 313             raise AttributeError("module {!r} has no attribute "
    314                                  "{!r}".format(__name__, attr))
    315

ipdb> c

In [169]: s = np.sin(t)

In [170]: t
Out[170]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [171]: s
Out[171]:
array([ 0.00000000e+00,  1.26592454e-01,  2.51147987e-01,  3.71662456e-01,
        4.86196736e-01,  5.92907929e-01,  6.90079011e-01,  7.76146464e-01,
        8.49725430e-01,  9.09631995e-01,  9.54902241e-01,  9.84807753e-01,
        9.98867339e-01,  9.96854776e-01,  9.78802446e-01,  9.45000819e-01,
        8.95993774e-01,  8.32569855e-01,  7.55749574e-01,  6.66769001e-01,
        5.67059864e-01,  4.58226522e-01,  3.42020143e-01,  2.20310533e-01,
        9.50560433e-02, -3.17279335e-02, -1.58001396e-01, -2.81732557e-01,
       -4.00930535e-01, -5.13677392e-01, -6.18158986e-01, -7.12694171e-01,
       -7.95761841e-01, -8.66025404e-01, -9.22354294e-01, -9.63842159e-01,
       -9.89821442e-01, -9.99874128e-01, -9.93838464e-01, -9.71811568e-01,
       -9.34147860e-01, -8.81453363e-01, -8.14575952e-01, -7.34591709e-01,
       -6.42787610e-01, -5.40640817e-01, -4.29794912e-01, -3.12033446e-01,
       -1.89251244e-01, -6.34239197e-02,  6.34239197e-02,  1.89251244e-01,
        3.12033446e-01,  4.29794912e-01,  5.40640817e-01,  6.42787610e-01,
        7.34591709e-01,  8.14575952e-01,  8.81453363e-01,  9.34147860e-01,
        9.71811568e-01,  9.93838464e-01,  9.99874128e-01,  9.89821442e-01,
        9.63842159e-01,  9.22354294e-01,  8.66025404e-01,  7.95761841e-01,
        7.12694171e-01,  6.18158986e-01,  5.13677392e-01,  4.00930535e-01,
        2.81732557e-01,  1.58001396e-01,  3.17279335e-02, -9.50560433e-02,
       -2.20310533e-01, -3.42020143e-01, -4.58226522e-01, -5.67059864e-01,
       -6.66769001e-01, -7.55749574e-01, -8.32569855e-01, -8.95993774e-01,
       -9.45000819e-01, -9.78802446e-01, -9.96854776e-01, -9.98867339e-01,
       -9.84807753e-01, -9.54902241e-01, -9.09631995e-01, -8.49725430e-01,
       -7.76146464e-01, -6.90079011e-01, -5.92907929e-01, -4.86196736e-01,
       -3.71662456e-01, -2.51147987e-01, -1.26592454e-01, -4.89858720e-16])

In [172]: plt.plot(t, s)
Out[172]: [<matplotlib.lines.Line2D at 0x7f1608407ca0>]

In [173]: plt.xlim?
Signature: plt.xlim(*args, **kwargs)
Docstring:
Get or set the x limits of the current axes.

Call signatures::

    left, right = xlim()  # return the current xlim
    xlim((left, right))   # set the xlim to left, right
    xlim(left, right)     # set the xlim to left, right

If you do not specify args, you can pass *left* or *right* as kwargs,
i.e.::

    xlim(right=3)  # adjust the right leaving left unchanged
    xlim(left=1)  # adjust the left leaving right unchanged

Setting limits turns autoscaling off for the x-axis.

Returns
-------
left, right
    A tuple of the new x-axis limits.

Notes
-----
Calling this function with no arguments (e.g. ``xlim()``) is the pyplot
equivalent of calling `~.Axes.get_xlim` on the current axes.
Calling this function with arguments is the pyplot equivalent of calling
`~.Axes.set_xlim` on the current axes. All arguments are passed though.
File:      /usr/local/lib/python3.8/dist-packages/matplotlib/pyplot.py
Type:      function

In [174]: plt.xlim(-1, 5)
Out[174]: (-1.0, 5.0)

In [175]: plt.ylim(-2, 2)
Out[175]: (-2.0, 2.0)

In [176]: plt.xlabel('new x label')
Out[176]: Text(0.5, 37.500000000000036, 'new x label')

In [177]: plt.ylabel('y values')
Out[177]: Text(13.944444444444452, 0.5, 'y values')

In [178]: plt.title('New title')
Out[178]: Text(0.5, 1.0, 'New title')

In [179]: plt.savefig?

In [180]: plt.savefig('example_figure.png')

In [181]: plt.close()

In [182]: plt.plot(t, s)
Out[182]: [<matplotlib.lines.Line2D at 0x7f1608592190>]

In [183]: c = np.cos(t)

In [184]: plt.plot(t, c)
Out[184]: [<matplotlib.lines.Line2D at 0x7f16085921f0>]

In [185]: plt.plot?

In [186]: plt.close()

In [187]: plt.plot(t, c, color='red', marker='.', linestyle='solid')
Out[187]: [<matplotlib.lines.Line2D at 0x7f1625991d60>]

In [188]: plt.plot(t, c, 'r.-')
Out[188]: [<matplotlib.lines.Line2D at 0x7f1625975730>]

In [189]: plt.plot(t, c, color='red', marker='x', linestyle='--')
Out[189]: [<matplotlib.lines.Line2D at 0x7f16254cf100>]

In [190]: plt.plot(t, c, color='red', marker='x', linestyle='--')
Out[190]: [<matplotlib.lines.Line2D at 0x7f16254f2850>]

In [191]: plt.plot?

In [192]: plt.plot(t, s, label='sin')
Out[192]: [<matplotlib.lines.Line2D at 0x7f1625288400>]

In [193]: plt.plot(t, c, label='cos')
Out[193]: [<matplotlib.lines.Line2D at 0x7f16254bc760>]

In [194]: plt.legend()
Out[194]: <matplotlib.legend.Legend at 0x7f1625975580>

In [195]: plt.legend?

In [196]: a = np.random.random(1000) - 0.5

In [197]: a
Out[197]:
array([ 3.35643814e-01, -2.56199889e-01, -8.76510843e-02, -3.73949152e-01,
        4.01162823e-01, -4.42925953e-01,  4.20024004e-02,  1.27172271e-01,
       -1.64665455e-01, -3.55985678e-02,  4.77731280e-01, -1.66261249e-01,
       -2.67799278e-01, -1.04208766e-01,  3.91592536e-01, -1.34589866e-01,
       -2.43936395e-01,  3.87767281e-01, -5.85386676e-02, -3.83405638e-01,
       -4.39789087e-01,  4.99440876e-01,  2.52256692e-02,  8.09702961e-02,
        1.42752926e-01,  1.12064080e-01, -5.70131865e-02, -3.00973792e-01,
       -1.03755713e-01, -2.09222750e-01,  1.12879117e-01, -3.18011113e-01,
       -2.16471824e-01, -1.66553645e-02,  4.13524740e-01, -4.71079298e-01,
        1.18344843e-01,  3.19016014e-01, -4.88494304e-01, -2.34388407e-01,
       -1.67494504e-01,  2.09186848e-01,  3.82003817e-01,  4.01057737e-01,
       -1.77301223e-01,  1.70679365e-01, -3.17524268e-01,  3.27826796e-01,
       -4.73057817e-01, -2.85238270e-01, -1.39928413e-01,  3.85036115e-01,
       -2.09988698e-01, -8.66029127e-02, -1.15938686e-01,  5.58804971e-02,
        1.76902817e-01,  1.70190740e-02,  2.04442185e-01,  2.02948449e-01,
       -2.52862865e-01,  4.61320723e-01,  2.99817160e-01, -2.51755948e-01,
        4.46929914e-01,  1.13168826e-01, -9.97562543e-02,  3.72510295e-01,
        3.04219736e-01,  2.64779003e-01, -8.13705086e-02, -1.38561777e-01,
        3.34672822e-01, -3.83666750e-01,  3.13472268e-01,  9.72547299e-02,
        8.38274415e-02,  6.57366174e-03,  4.83247093e-01,  2.14149886e-01,
        6.41010923e-02,  3.64933758e-02, -3.94868863e-01, -4.95813652e-01,
        4.92750888e-01,  3.53081634e-01,  1.59064621e-01, -2.75642954e-01,
        4.68959882e-01,  1.20561880e-01,  2.84196272e-02, -2.51266478e-01,
       -4.70294505e-01,  1.38444162e-01, -1.32509477e-01,  3.41051251e-01,
        3.82576911e-01, -2.09632367e-01,  2.04796649e-01,  2.61079257e-01,
       -7.75283849e-02, -2.99162671e-01, -1.04001225e-01,  1.63276061e-01,
       -4.43025964e-01, -2.25903632e-01,  3.50038312e-01,  4.20800318e-01,
       -2.59829103e-01, -2.97862064e-01,  3.76241507e-01,  6.01886200e-02,
        2.44680250e-01, -2.52854965e-01, -4.93842065e-01, -2.94068638e-01,
       -2.04529195e-01, -4.85447525e-01,  3.85108969e-02,  3.25792602e-01,
        4.33155800e-01,  4.64459003e-01,  3.15610511e-01, -4.03950459e-01,
       -2.36330505e-01, -4.25538037e-01, -1.75277500e-01, -1.41644108e-01,
        2.35333953e-02,  3.81757254e-01, -3.78294693e-01,  3.60321557e-01,
       -3.50627996e-01, -2.25181953e-01, -2.26719137e-01, -1.01482440e-01,
        3.14865898e-01, -1.27000885e-01,  2.13074788e-01,  4.80127857e-01,
       -2.62595208e-01, -1.88055728e-01, -1.78223350e-01, -1.54260857e-01,
       -1.99940042e-01, -2.15882096e-01,  2.72917048e-01,  4.47890639e-01,
        3.20789827e-01, -3.44681591e-01,  2.72844271e-01,  3.78783998e-01,
        3.56531534e-01,  1.90531832e-01, -2.46946064e-01,  4.87044533e-01,
        1.91219619e-01, -4.48356699e-01, -4.93966652e-01, -1.16259212e-01,
        3.70753480e-01, -3.93182176e-01,  4.41830207e-01,  3.63442487e-01,
        1.76214797e-01,  4.38143830e-01,  3.02623693e-01,  1.13716347e-01,
        1.73362148e-01, -1.54263809e-01,  4.71787848e-01,  1.74139624e-01,
       -1.30800081e-02, -2.62865990e-01,  3.86967605e-01, -1.48730711e-01,
        1.10480539e-03,  8.91834860e-02, -7.01149652e-02, -4.19663463e-03,
       -2.65592813e-01, -2.12286928e-02,  2.58966102e-01, -4.87923410e-02,
        1.22741331e-01, -4.01295922e-01,  1.22447223e-01, -1.15358823e-01,
        4.27587680e-01,  3.65483591e-01,  2.91159277e-01,  2.24939292e-01,
        1.94260209e-01, -2.25455316e-01,  3.20529309e-01,  3.08349939e-01,
       -2.76509864e-01, -3.23383235e-01,  1.01989224e-01,  3.18501962e-03,
       -8.25659243e-02, -4.68669657e-01,  1.30142319e-01,  2.64313574e-01,
        1.49846935e-01, -2.76461635e-01,  4.95149558e-01, -3.66655646e-01,
        8.26658901e-03, -4.77345858e-04, -4.19468153e-01,  2.03486521e-01,
       -1.82065077e-01, -1.60831661e-01, -4.11759283e-01,  1.23722945e-01,
        2.62419955e-01,  3.04900117e-01, -4.03303970e-01,  7.66526341e-03,
        3.20670510e-01,  4.18765306e-01, -3.73694462e-01, -4.42005660e-01,
       -4.27005896e-01, -2.11915055e-01,  4.80267575e-01, -8.67365755e-02,
        2.65663611e-01, -4.15319252e-01, -2.63317274e-01,  1.51598881e-01,
       -2.48914328e-01, -2.12377939e-01,  1.20243042e-01,  2.67303712e-01,
        3.59088603e-01, -1.95341413e-01,  4.12056289e-01, -4.21909910e-01,
        3.81361799e-01, -2.70868398e-01,  2.06551834e-01, -1.46854994e-01,
        2.93156257e-01,  4.76530998e-01,  4.47390128e-01, -2.87243733e-01,
        2.90843346e-01,  7.79306067e-02,  7.96876160e-02,  1.97781442e-01,
       -1.52989232e-01,  2.27627600e-01,  3.16409094e-01,  3.93201014e-01,
        7.28285200e-02, -2.18180136e-02, -2.94070872e-01, -1.65421970e-01,
       -1.48062732e-01,  2.76796756e-01, -4.21380209e-01,  2.44921747e-02,
       -3.77907083e-01, -4.28905027e-01, -3.99988343e-01, -3.03751279e-01,
       -3.08782309e-02,  4.78960577e-02,  2.18735512e-01, -3.11018414e-01,
       -2.72484837e-01, -3.14921700e-01,  4.40321458e-01,  1.56188411e-01,
       -2.66536593e-01, -3.82364513e-01,  3.16408487e-02, -1.24891955e-01,
       -6.61681914e-02,  4.98426835e-01,  4.51188180e-01, -4.44899524e-01,
        3.11820370e-01,  2.39618142e-03, -5.69566733e-02, -4.37641847e-01,
        4.22879639e-01,  1.23287913e-01, -2.19913448e-01,  3.19151600e-01,
       -4.64541194e-01,  4.00603590e-01, -4.61602852e-01, -3.39307044e-01,
       -1.93459884e-01, -9.97660441e-02,  4.83010280e-01,  2.42108689e-01,
       -5.20059246e-02,  1.85453789e-01,  9.42516535e-02, -2.24814605e-01,
       -9.04814458e-02, -3.15628996e-01, -2.94442341e-01, -2.38483540e-02,
        5.61709995e-02, -1.93472336e-01,  4.30760518e-01, -5.98042910e-02,
        1.22359098e-01, -3.13158889e-01,  3.58971127e-01,  5.51853331e-02,
       -4.33089939e-01, -1.32935591e-01,  1.45437362e-01,  2.61674148e-01,
       -1.99382671e-01,  7.27053047e-03, -2.76148157e-01,  1.14062508e-01,
       -4.65298620e-01, -6.52530864e-02, -2.10426293e-01,  4.89057760e-01,
       -1.72247160e-01,  4.81323639e-01,  2.34984813e-01, -3.08530437e-01,
       -3.23025388e-01, -9.89724055e-02, -3.43847440e-01, -3.33517266e-01,
       -1.75124999e-01, -7.27573326e-03, -2.64971748e-01,  4.50399673e-01,
        3.93031770e-01,  1.78167909e-01,  1.64543495e-01, -3.83874905e-01,
       -3.56152244e-01,  4.54347094e-02, -1.37336345e-01,  4.29711889e-01,
        4.60061448e-01,  6.73291317e-02, -4.68823208e-01,  4.02240176e-01,
        1.61456692e-01, -2.50467251e-01, -4.16137008e-01,  4.12984598e-03,
       -3.63474431e-01, -3.73916380e-01,  3.71504631e-01, -4.23611347e-01,
        5.84461450e-02, -4.46356429e-01, -1.16442331e-01,  6.17758287e-02,
        1.33135039e-01,  1.60834021e-02,  8.40375425e-02, -4.14905295e-01,
        4.44149049e-02, -4.23969140e-01,  2.86717549e-01,  1.76637691e-01,
        1.66439313e-01, -3.56273392e-01, -1.92084657e-01, -1.34893796e-01,
        1.47413389e-02,  4.94950102e-01,  4.70692743e-01, -2.74367775e-01,
        4.39182905e-01,  2.75520075e-01,  2.77772774e-02, -1.40829246e-01,
        2.80139834e-01, -9.06486804e-02, -3.19256624e-01, -3.67465586e-01,
        3.37589812e-02,  3.77069540e-01,  1.57396882e-01,  3.44730900e-03,
       -2.93301924e-01,  2.65826046e-01, -1.67649506e-01,  1.12606984e-01,
        3.43845122e-01, -1.78281730e-01,  4.38466327e-01,  4.00221437e-01,
        1.61522318e-01, -1.36455495e-01, -8.48874675e-02, -1.63564491e-01,
        4.99014545e-01, -2.25697042e-01, -4.37113218e-01,  4.07833405e-01,
       -4.48702417e-01, -4.24128155e-01, -1.95417245e-01,  6.29304935e-02,
       -2.02734185e-01, -1.40115685e-01,  2.54223582e-01,  4.79037777e-01,
        9.44984045e-02,  3.15542232e-01, -3.83867686e-01, -4.49614388e-01,
        5.03405431e-02,  1.88164702e-01, -2.30439564e-01,  3.43491536e-01,
        2.77006026e-01, -9.65593492e-02, -1.05934014e-01,  3.16334686e-01,
        8.13052327e-02, -3.94475256e-01,  9.74276946e-03,  3.26473412e-01,
       -3.20558951e-01,  1.30570048e-01, -4.89079930e-01,  4.12891021e-01,
        4.96772443e-01, -1.97207928e-01, -3.81978429e-01,  1.85132152e-01,
        1.16292114e-01,  2.02237948e-01, -1.16255933e-01, -1.98217775e-01,
        4.41286667e-01,  4.98733282e-01, -1.09546674e-01,  1.48837457e-01,
        3.97409872e-01,  5.35696596e-02, -1.03762031e-01,  2.82534782e-01,
       -1.66862816e-01,  4.81074499e-02,  4.12701179e-01,  4.60554751e-01,
       -4.36472135e-01, -4.91117229e-03,  6.62231236e-02,  2.61535035e-01,
        4.69263365e-01,  3.28410981e-01, -4.81618983e-01,  4.01106289e-01,
       -1.53948958e-01,  4.75482870e-01, -4.83578301e-01,  3.15289551e-01,
        4.79442533e-01,  2.44104662e-01,  2.34304709e-01,  2.54668970e-01,
       -1.65617857e-02, -3.66830200e-01,  2.29512426e-01,  4.75812714e-01,
        1.38820392e-02, -2.53209704e-01,  7.02807933e-02,  1.24756624e-01,
       -3.43703031e-01,  1.87855656e-01,  1.00178043e-01, -8.47158861e-02,
        3.51447624e-01, -3.34400631e-01, -4.86416270e-01, -1.60150444e-01,
       -1.99984125e-03,  4.11141139e-01, -4.99883395e-01,  2.54431164e-01,
        1.12597789e-01, -3.12134027e-01,  2.42987906e-01,  2.56780617e-01,
       -2.26755885e-02, -2.28983183e-01,  4.96212837e-01, -1.93525124e-01,
        3.21436665e-01, -3.48764221e-01,  1.98939393e-01,  2.40754466e-01,
       -2.47440881e-01,  3.02254057e-01,  1.81494018e-02, -4.20126131e-01,
       -1.46080183e-01,  4.48410024e-02, -4.35023187e-01,  3.36765080e-01,
       -3.86292065e-01,  4.30765083e-01,  4.84992436e-01, -4.45048645e-01,
       -4.42664763e-01,  4.63217504e-01,  4.02267135e-01, -1.36930972e-01,
       -3.73144389e-01, -1.73401759e-01, -4.34076177e-01, -3.27279535e-02,
        1.03991357e-01,  3.82698915e-01,  3.74786776e-01,  1.14775050e-02,
        8.85832093e-02, -1.61389571e-01,  3.45545316e-01,  5.48959708e-02,
        4.79395806e-01, -3.07564714e-01,  1.83762162e-01,  2.05905549e-01,
       -9.06198375e-02, -1.53546334e-02,  4.03306582e-02,  1.60551346e-01,
        3.01041388e-01,  2.36785442e-01,  1.22340348e-01,  6.76985129e-02,
        1.40349643e-01,  4.60151299e-01,  4.81807831e-02,  2.35653918e-01,
       -3.72869787e-01,  1.34315798e-01,  4.78407727e-01, -1.47176697e-01,
        1.07670123e-01,  6.52543127e-02, -3.26622314e-01,  2.77323989e-01,
       -4.48405560e-01,  1.37937815e-02,  3.80986595e-01, -2.47901732e-01,
        2.27489021e-01, -3.30360152e-01, -4.74638536e-01,  4.74285858e-02,
       -2.95235990e-02,  3.83714907e-01, -9.72876627e-02,  1.53606334e-01,
       -4.99329408e-01, -4.08003488e-01,  6.74896549e-02, -3.27805112e-01,
       -4.14638319e-01,  2.25806787e-01,  2.48368389e-01,  4.78402118e-01,
       -3.31340254e-01,  4.23108244e-01, -2.96415823e-01,  4.15549357e-01,
       -4.36364611e-01, -4.54802909e-01, -5.98167149e-02, -1.59446789e-01,
        3.90961830e-01, -3.99216543e-01, -9.57198393e-02,  4.84200621e-01,
       -6.69159234e-03, -8.24246137e-02,  4.18169919e-02,  3.65304061e-01,
       -2.53858379e-01, -1.00665123e-01, -3.42761695e-02, -1.57403013e-01,
        6.79089970e-02, -6.51772497e-02,  9.98175929e-02,  2.81313248e-01,
        2.05708204e-02, -2.41223045e-02,  2.31426010e-01,  4.52016185e-01,
        2.75093058e-01, -2.23408971e-01,  3.66502940e-01,  2.81995974e-01,
       -4.80832613e-01, -2.90965275e-01,  4.27888080e-01,  1.34080030e-02,
        1.30732140e-01,  2.44005695e-01,  2.69217484e-01, -4.62766381e-01,
        3.73310605e-01, -2.69048903e-01,  4.75300301e-01,  3.48232707e-01,
        1.28628887e-01, -2.97452887e-01, -3.86787859e-01,  1.35503216e-01,
       -4.45891922e-01,  2.22120334e-01,  4.77534556e-02, -2.52372215e-01,
       -1.57164303e-01, -2.40842008e-01,  4.04224970e-01, -4.56444248e-03,
       -1.91449149e-01,  8.74563426e-02,  1.40962299e-03, -2.17816877e-01,
       -7.85447567e-02,  2.89269438e-01,  2.53869168e-01,  2.12619027e-01,
       -3.91238891e-01,  2.17006375e-01,  1.29290700e-01,  2.10463814e-01,
        4.85590943e-01,  1.28651233e-02, -4.40879532e-01,  3.36105865e-01,
       -3.69412097e-01, -4.33118882e-01, -1.68191022e-01,  2.19415175e-01,
       -5.59269502e-03, -2.91851375e-01, -2.98823509e-01, -1.32120403e-01,
        3.11809994e-01, -3.16031525e-01, -4.16116088e-01, -3.62451114e-01,
       -3.39078618e-01, -4.65001090e-01,  1.20914288e-01,  1.90348161e-01,
        7.38447974e-02, -4.26015538e-01,  4.34007721e-01,  3.88645789e-01,
       -1.19315673e-01,  2.30912194e-01,  2.67355498e-01, -4.13109521e-01,
        3.46459291e-01,  2.22816460e-01, -1.68809293e-01,  3.66899936e-01,
       -2.98839505e-01, -1.73484901e-01, -4.63093801e-02,  4.78675505e-01,
       -2.55489953e-01, -1.75206930e-01,  2.17082186e-01, -1.44995786e-01,
       -4.74017778e-02,  1.70063606e-01,  4.09933003e-02,  4.13376544e-01,
        2.09774327e-01, -4.09945320e-01,  2.07544252e-01,  2.40564527e-01,
       -3.78110560e-01, -2.93325191e-02,  1.59355728e-01, -2.07202688e-01,
        3.30612061e-01,  3.76118203e-01, -3.41092411e-01,  6.64540557e-03,
       -4.99583385e-01,  1.56521800e-01,  4.40492712e-01,  3.48407046e-01,
       -9.21322479e-02,  5.81326046e-02,  3.02590746e-01,  3.70525756e-01,
        2.55206242e-01,  2.23133307e-01, -3.73617526e-01, -1.15334829e-01,
       -2.40341644e-01,  4.71368949e-01,  3.14350264e-01,  2.64785339e-01,
       -3.78949920e-01,  2.28358189e-01, -3.03210561e-01,  3.80192800e-01,
       -5.68231450e-02,  1.00708010e-01,  1.60851978e-01,  8.82760365e-02,
        2.75286803e-01, -3.00152684e-01, -2.54234460e-01, -5.16099444e-02,
       -2.02932327e-01,  3.40434560e-01, -8.31563434e-02,  4.33199221e-01,
        3.64666224e-01,  2.41778435e-01,  2.79580690e-01,  2.03053920e-01,
        3.88454731e-01,  1.38259914e-01, -2.47060590e-01, -2.45429147e-01,
        1.98313354e-02,  5.22966128e-02, -4.07645530e-01,  4.36346801e-01,
        4.53686226e-01, -2.46938762e-02, -3.79890555e-01, -4.00215991e-01,
       -3.14867788e-01,  1.92395471e-01,  2.44686402e-01,  3.12681808e-01,
        3.98997741e-01, -1.45691891e-01,  3.15191535e-01, -1.28893757e-01,
        2.86107161e-01, -3.49745188e-02,  2.66348232e-01,  4.13009619e-01,
        3.02623631e-01,  1.63502239e-01,  3.50849733e-01, -6.26181022e-02,
        2.24592589e-01, -1.78969898e-01, -8.56839870e-02, -4.63095850e-01,
        4.70005580e-01, -1.87337100e-01, -1.48621974e-01, -2.23418868e-01,
        7.60355810e-02, -3.46005680e-01, -3.85219194e-01,  2.92322008e-01,
       -1.02634140e-01, -1.48101277e-01,  2.52765080e-01,  1.92293913e-01,
       -9.07037964e-02, -4.16554037e-01,  2.42654115e-01, -2.67128208e-01,
       -1.18506708e-01,  3.05201517e-02,  4.89208781e-01, -1.25475851e-01,
       -4.60478937e-01,  1.94676677e-01, -2.04058423e-01, -4.06000253e-02,
       -4.26008442e-01,  2.16405168e-01,  4.41012837e-01, -5.23094778e-02,
        2.53428224e-02, -7.11183579e-02,  3.51991954e-01,  2.71923032e-01,
        4.03206978e-01,  2.18540024e-01,  1.88295834e-01,  4.39491025e-01,
       -1.21711332e-01,  3.32767868e-01,  1.64523203e-01,  4.37315032e-01,
        2.14893444e-01, -5.25712238e-02,  4.04689227e-01, -4.10122631e-01,
        3.07122083e-02,  2.13708133e-01,  2.78750422e-01, -1.92495013e-01,
       -3.31519157e-01, -2.42035457e-01, -4.31668419e-01,  2.58872287e-01,
        4.29642342e-01, -3.54608967e-01,  3.94843878e-01,  4.45252899e-01,
       -3.30241683e-01, -2.63896407e-01,  1.11537900e-01,  1.17414653e-01,
        6.27493720e-02, -2.05543129e-01,  2.87456169e-01, -3.67120064e-01,
        4.70358660e-01, -5.84997401e-02,  4.23997524e-01, -5.98379999e-02,
        2.00391563e-01,  1.85207195e-01,  3.69448923e-01,  2.98870155e-01,
       -4.29279352e-02,  2.47412609e-01,  3.34386432e-01,  2.67225076e-01,
        7.54535663e-02, -3.72068408e-01, -3.08153898e-01,  6.74735737e-02,
       -9.12342489e-02,  5.18554119e-02, -1.78183984e-01, -2.31380867e-01,
        4.85298315e-01, -1.89865468e-01, -4.91546200e-01,  3.59713872e-01,
        3.97868890e-01,  7.98804545e-02, -1.76031520e-01,  2.62357707e-01,
        4.91495001e-01, -3.15537226e-01,  1.64362659e-01,  4.86228605e-01,
        3.62146283e-01,  1.12746434e-01,  7.91332120e-02, -2.40203696e-01,
       -2.86221685e-01, -3.36123158e-01,  1.58415429e-01,  3.81260721e-01,
       -9.90324226e-02,  1.79438695e-01, -4.59510547e-02, -4.40440921e-01,
       -2.42637651e-01,  1.38570515e-01,  2.05165196e-01, -4.52839818e-02,
        1.66207348e-01,  9.48117185e-02,  9.52583524e-02, -4.93948047e-01,
       -4.15774850e-01, -3.14717742e-01, -1.20274588e-01, -4.59195390e-01,
        4.57505624e-03, -4.95470329e-01,  3.44103473e-01,  1.01698755e-01,
        8.04932434e-02, -1.73094729e-01, -4.53625422e-01,  2.08052365e-01,
       -1.72894832e-01,  4.78470547e-01,  1.04361486e-01, -1.50349954e-01,
        3.44317530e-01, -6.74510656e-02,  3.43348221e-01, -2.23927412e-01,
        3.95747409e-01,  9.22005348e-02,  2.05988144e-01,  1.60558097e-01,
       -1.69816261e-01,  1.23873956e-01, -4.18157131e-01, -3.16080538e-01,
        8.83241276e-02,  9.13996037e-02,  1.66324106e-01,  3.67320842e-01,
        2.73246963e-01, -2.25094930e-01,  3.37660992e-01, -3.48027447e-01,
        2.71410139e-01, -2.80329908e-01, -3.63380640e-01, -4.44244899e-01,
        4.68573778e-01,  2.27720678e-01, -4.77145050e-01,  4.54280580e-01,
        3.25614734e-01,  2.10810050e-01,  5.48344111e-02, -3.81961327e-02,
       -3.37744175e-01, -2.22272067e-01, -2.70414370e-01,  6.73722253e-02,
       -3.59531058e-01,  2.16782247e-01, -2.83831930e-01,  3.30555483e-01,
        2.39388261e-01, -4.53309574e-01,  1.37716622e-01,  2.51061372e-01,
       -4.31632504e-01, -1.12930059e-01, -3.52081399e-01, -2.61194470e-01,
       -3.13159182e-01, -2.91216408e-01, -3.25434441e-01, -1.56804110e-01,
        4.16577093e-01,  1.34031431e-01, -2.47785406e-01,  3.34652302e-01,
        1.06647606e-01,  2.43386958e-01,  1.09848595e-01, -2.49969714e-01,
        1.89612126e-01,  3.08090188e-01,  4.05922692e-01,  3.73895975e-01,
       -2.52796770e-01,  4.08434149e-01,  1.12822303e-02,  4.41126698e-01,
        3.56658307e-01,  2.15715438e-03, -9.17450928e-02, -4.36087620e-01,
       -6.72916335e-02,  3.58308235e-01,  2.23549627e-01, -2.85102356e-01,
        4.53080965e-01, -2.75731569e-01, -5.94218333e-02,  5.56749282e-02,
       -2.47140428e-01, -2.91613310e-02, -5.78229858e-02, -6.12962937e-02,
        6.90314838e-03, -1.78544678e-02,  1.54335548e-01,  1.02599379e-01,
        4.52225675e-01, -2.35348298e-01, -2.97653305e-01, -4.65065893e-01,
       -1.22915053e-01, -1.83577905e-01, -3.48193128e-01,  3.66720214e-01,
       -6.66709724e-02,  3.89850051e-01, -9.65276789e-02, -6.17421462e-02])

In [198]: a.max()
Out[198]: 0.4994408761830118

In [199]: a.min()
Out[199]: -0.49988339486864863

In [200]: plt.hist(a)
Out[200]:
(array([ 93.,  85., 101., 100.,  87., 102., 101., 112., 111., 108.]),
 array([-4.99883395e-01, -3.99950968e-01, -3.00018541e-01, -2.00086114e-01,
        -1.00153686e-01, -2.21259343e-04,  9.97111678e-02,  1.99643595e-01,
         2.99576022e-01,  3.99508449e-01,  4.99440876e-01]),
 <BarContainer object of 10 artists>)

In [201]: plt.hist(a, bins=100)
Out[201]:
(array([ 9.,  7.,  5., 10.,  4., 15., 12., 11., 13.,  7.,  5.,  9., 12.,
         8.,  6.,  8., 10.,  6., 14.,  7., 14.,  6.,  9., 11., 13., 15.,
         5., 12.,  7.,  9., 12.,  5., 14., 13.,  9., 11., 11.,  7.,  9.,
         9., 15., 10.,  3., 10., 14.,  7.,  6.,  9.,  5.,  8., 15., 10.,
         8.,  6., 12., 12., 13.,  8., 11.,  7., 10., 13., 14., 11.,  4.,
        10., 13.,  9.,  8.,  9., 14., 15., 12.,  7., 13., 10., 15., 13.,
         8.,  5., 10., 14.,  9., 10., 11., 10., 12., 11., 14., 10., 13.,
        10.,  6., 12., 11.,  7.,  9., 17., 13., 10.]),
 array([-4.99883395e-01, -4.89890152e-01, -4.79896909e-01, -4.69903667e-01,
        -4.59910424e-01, -4.49917181e-01, -4.39923939e-01, -4.29930696e-01,
        -4.19937453e-01, -4.09944210e-01, -3.99950968e-01, -3.89957725e-01,
        -3.79964482e-01, -3.69971240e-01, -3.59977997e-01, -3.49984754e-01,
        -3.39991512e-01, -3.29998269e-01, -3.20005026e-01, -3.10011783e-01,
        -3.00018541e-01, -2.90025298e-01, -2.80032055e-01, -2.70038813e-01,
        -2.60045570e-01, -2.50052327e-01, -2.40059084e-01, -2.30065842e-01,
        -2.20072599e-01, -2.10079356e-01, -2.00086114e-01, -1.90092871e-01,
        -1.80099628e-01, -1.70106385e-01, -1.60113143e-01, -1.50119900e-01,
        -1.40126657e-01, -1.30133415e-01, -1.20140172e-01, -1.10146929e-01,
        -1.00153686e-01, -9.01604437e-02, -8.01672010e-02, -7.01739583e-02,
        -6.01807156e-02, -5.01874729e-02, -4.01942302e-02, -3.02009875e-02,
        -2.02077448e-02, -1.02145021e-02, -2.21259343e-04,  9.77198337e-03,
         1.97652261e-02,  2.97584688e-02,  3.97517115e-02,  4.97449542e-02,
         5.97381969e-02,  6.97314396e-02,  7.97246823e-02,  8.97179251e-02,
         9.97111678e-02,  1.09704410e-01,  1.19697653e-01,  1.29690896e-01,
         1.39684139e-01,  1.49677381e-01,  1.59670624e-01,  1.69663867e-01,
         1.79657109e-01,  1.89650352e-01,  1.99643595e-01,  2.09636838e-01,
         2.19630080e-01,  2.29623323e-01,  2.39616566e-01,  2.49609808e-01,
         2.59603051e-01,  2.69596294e-01,  2.79589537e-01,  2.89582779e-01,
         2.99576022e-01,  3.09569265e-01,  3.19562507e-01,  3.29555750e-01,
         3.39548993e-01,  3.49542236e-01,  3.59535478e-01,  3.69528721e-01,
         3.79521964e-01,  3.89515206e-01,  3.99508449e-01,  4.09501692e-01,
         4.19494934e-01,  4.29488177e-01,  4.39481420e-01,  4.49474663e-01,
         4.59467905e-01,  4.69461148e-01,  4.79454391e-01,  4.89447633e-01,
         4.99440876e-01]),
 <BarContainer object of 100 artists>)

In [202]: plt.hist(a, bins='auto')
Out[202]:
(array([ 86.,  72.,  94.,  96.,  87.,  76., 101.,  93.,  98., 102.,  95.]),
 array([-0.49988339, -0.40903573, -0.31818807, -0.22734041, -0.13649275,
        -0.04564509,  0.04520257,  0.13605023,  0.22689789,  0.31774555,
         0.40859322,  0.49944088]),
 <BarContainer object of 11 artists>)

In [203]: plt.hist(a, bins=np.arange(-1, 1, 0.1))
Out[203]:
(array([  0.,   0.,   0.,   0.,   0.,  92.,  86., 101., 100.,  87., 103.,
        100., 113., 110., 108.,   0.,   0.,   0.,   0.]),
 array([-1.00000000e+00, -9.00000000e-01, -8.00000000e-01, -7.00000000e-01,
        -6.00000000e-01, -5.00000000e-01, -4.00000000e-01, -3.00000000e-01,
        -2.00000000e-01, -1.00000000e-01, -2.22044605e-16,  1.00000000e-01,
         2.00000000e-01,  3.00000000e-01,  4.00000000e-01,  5.00000000e-01,
         6.00000000e-01,  7.00000000e-01,  8.00000000e-01,  9.00000000e-01]),
 <BarContainer object of 19 artists>)

In [204]: plt.hist(a, bins=np.arange(-0.25, 0.25, 0.05))
Out[204]:
(array([48., 53., 47., 52., 35., 51., 52., 52., 48.]),
 array([-2.50000000e-01, -2.00000000e-01, -1.50000000e-01, -1.00000000e-01,
        -5.00000000e-02, -5.55111512e-17,  5.00000000e-02,  1.00000000e-01,
         1.50000000e-01,  2.00000000e-01]),
 <BarContainer object of 9 artists>)

In [205]: plt.plot(t, c, '.')
Out[205]: [<matplotlib.lines.Line2D at 0x7f16098877c0>]

In [206]: plt.scatter?

In [207]: plt.bar?

In [208]: plt.errorbar?

In [209]: plt.axhline
Out[209]: <function matplotlib.pyplot.axhline(y=0, xmin=0, xmax=1, **kwargs)>

In [210]: plt.axvline
Out[210]: <function matplotlib.pyplot.axvline(x=0, ymin=0, ymax=1, **kwargs)>

In [211]: plt.figure()
Out[211]: <Figure size 700x700 with 0 Axes>

In [212]: plt.plot(t, c, '.', color='red')
Out[212]: [<matplotlib.lines.Line2D at 0x7f160981b880>]

In [213]: plt.show()

In [214]: plt.show()

In [215]: %matplotlib
Using matplotlib backend: Qt5Agg

In [216]: %matplotlib
Using matplotlib backend: Qt5Agg

In [217]: plt.plot(t, c, '.', color='red')
Out[217]: [<matplotlib.lines.Line2D at 0x7f15f98eb5b0>]

In [218]:
